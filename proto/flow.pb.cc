// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow.proto

#include "flow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow {
namespace access {
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr BlockHeaderResponse::BlockHeaderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockHeaderResponseDefaultTypeInternal {
  constexpr BlockHeaderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderResponseDefaultTypeInternal() {}
  union {
    BlockHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderResponseDefaultTypeInternal _BlockHeaderResponse_default_instance_;
constexpr GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_sealed_(false){}
struct GetLatestBlockHeaderRequestDefaultTypeInternal {
  constexpr GetLatestBlockHeaderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestBlockHeaderRequestDefaultTypeInternal() {}
  union {
    GetLatestBlockHeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestBlockHeaderRequestDefaultTypeInternal _GetLatestBlockHeaderRequest_default_instance_;
constexpr GetBlockHeaderByIdRequest::GetBlockHeaderByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockHeaderByIdRequestDefaultTypeInternal {
  constexpr GetBlockHeaderByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockHeaderByIdRequestDefaultTypeInternal() {}
  union {
    GetBlockHeaderByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockHeaderByIdRequestDefaultTypeInternal _GetBlockHeaderByIdRequest_default_instance_;
constexpr GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(PROTOBUF_ULONGLONG(0)){}
struct GetBlockHeaderByHeightRequestDefaultTypeInternal {
  constexpr GetBlockHeaderByHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockHeaderByHeightRequestDefaultTypeInternal() {}
  union {
    GetBlockHeaderByHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockHeaderByHeightRequestDefaultTypeInternal _GetBlockHeaderByHeightRequest_default_instance_;
constexpr BlockResponse::BlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockResponseDefaultTypeInternal {
  constexpr BlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponseDefaultTypeInternal() {}
  union {
    BlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
constexpr GetLatestBlockRequest::GetLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_sealed_(false){}
struct GetLatestBlockRequestDefaultTypeInternal {
  constexpr GetLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestBlockRequestDefaultTypeInternal() {}
  union {
    GetLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestBlockRequestDefaultTypeInternal _GetLatestBlockRequest_default_instance_;
constexpr GetBlockByIdRequest::GetBlockByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockByIdRequestDefaultTypeInternal {
  constexpr GetBlockByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockByIdRequestDefaultTypeInternal() {}
  union {
    GetBlockByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockByIdRequestDefaultTypeInternal _GetBlockByIdRequest_default_instance_;
constexpr GetBlockByHeightRequest::GetBlockByHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(PROTOBUF_ULONGLONG(0)){}
struct GetBlockByHeightRequestDefaultTypeInternal {
  constexpr GetBlockByHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockByHeightRequestDefaultTypeInternal() {}
  union {
    GetBlockByHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockByHeightRequestDefaultTypeInternal _GetBlockByHeightRequest_default_instance_;
constexpr CollectionResponse::CollectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_(nullptr){}
struct CollectionResponseDefaultTypeInternal {
  constexpr CollectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionResponseDefaultTypeInternal() {}
  union {
    CollectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionResponseDefaultTypeInternal _CollectionResponse_default_instance_;
constexpr GetCollectionByIdRequest::GetCollectionByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetCollectionByIdRequestDefaultTypeInternal {
  constexpr GetCollectionByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCollectionByIdRequestDefaultTypeInternal() {}
  union {
    GetCollectionByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCollectionByIdRequestDefaultTypeInternal _GetCollectionByIdRequest_default_instance_;
constexpr SendTransactionResponse::SendTransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SendTransactionResponseDefaultTypeInternal {
  constexpr SendTransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionResponseDefaultTypeInternal() {}
  union {
    SendTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionResponseDefaultTypeInternal _SendTransactionResponse_default_instance_;
constexpr SendTransactionRequest::SendTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct SendTransactionRequestDefaultTypeInternal {
  constexpr SendTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionRequestDefaultTypeInternal() {}
  union {
    SendTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionRequestDefaultTypeInternal _SendTransactionRequest_default_instance_;
constexpr GetTransactionRequest::GetTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTransactionRequestDefaultTypeInternal {
  constexpr GetTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTransactionRequestDefaultTypeInternal() {}
  union {
    GetTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTransactionRequestDefaultTypeInternal _GetTransactionRequest_default_instance_;
constexpr TransactionResponse::TransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct TransactionResponseDefaultTypeInternal {
  constexpr TransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResponseDefaultTypeInternal() {}
  union {
    TransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
constexpr TransactionResultResponse::TransactionResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , status_code_(0u){}
struct TransactionResultResponseDefaultTypeInternal {
  constexpr TransactionResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResultResponseDefaultTypeInternal() {}
  union {
    TransactionResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResultResponseDefaultTypeInternal _TransactionResultResponse_default_instance_;
constexpr AccountResponse::AccountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(nullptr){}
struct AccountResponseDefaultTypeInternal {
  constexpr AccountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResponseDefaultTypeInternal() {}
  union {
    AccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResponseDefaultTypeInternal _AccountResponse_default_instance_;
constexpr GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAccountAtLatestBlockRequestDefaultTypeInternal {
  constexpr GetAccountAtLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtLatestBlockRequestDefaultTypeInternal() {}
  union {
    GetAccountAtLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtLatestBlockRequestDefaultTypeInternal _GetAccountAtLatestBlockRequest_default_instance_;
constexpr GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_height_(PROTOBUF_ULONGLONG(0)){}
struct GetAccountAtBlockHeightRequestDefaultTypeInternal {
  constexpr GetAccountAtBlockHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAtBlockHeightRequestDefaultTypeInternal() {}
  union {
    GetAccountAtBlockHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAtBlockHeightRequestDefaultTypeInternal _GetAccountAtBlockHeightRequest_default_instance_;
constexpr ExecuteScriptResponse::ExecuteScriptResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptResponseDefaultTypeInternal {
  constexpr ExecuteScriptResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptResponseDefaultTypeInternal() {}
  union {
    ExecuteScriptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptResponseDefaultTypeInternal _ExecuteScriptResponse_default_instance_;
constexpr ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtLatestBlockRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtLatestBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtLatestBlockRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtLatestBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtLatestBlockRequestDefaultTypeInternal _ExecuteScriptAtLatestBlockRequest_default_instance_;
constexpr ExecuteScriptAtBlockIdRequest::ExecuteScriptAtBlockIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteScriptAtBlockIdRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockIdRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockIdRequestDefaultTypeInternal _ExecuteScriptAtBlockIdRequest_default_instance_;
constexpr ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_height_(PROTOBUF_ULONGLONG(0)){}
struct ExecuteScriptAtBlockHeightRequestDefaultTypeInternal {
  constexpr ExecuteScriptAtBlockHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteScriptAtBlockHeightRequestDefaultTypeInternal() {}
  union {
    ExecuteScriptAtBlockHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteScriptAtBlockHeightRequestDefaultTypeInternal _ExecuteScriptAtBlockHeightRequest_default_instance_;
constexpr EventsResponse_Result::EventsResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_timestamp_(nullptr)
  , block_height_(PROTOBUF_ULONGLONG(0)){}
struct EventsResponse_ResultDefaultTypeInternal {
  constexpr EventsResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsResponse_ResultDefaultTypeInternal() {}
  union {
    EventsResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsResponse_ResultDefaultTypeInternal _EventsResponse_Result_default_instance_;
constexpr EventsResponse::EventsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct EventsResponseDefaultTypeInternal {
  constexpr EventsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;
constexpr GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_height_(PROTOBUF_ULONGLONG(0))
  , end_height_(PROTOBUF_ULONGLONG(0)){}
struct GetEventsForHeightRangeRequestDefaultTypeInternal {
  constexpr GetEventsForHeightRangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForHeightRangeRequestDefaultTypeInternal() {}
  union {
    GetEventsForHeightRangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForHeightRangeRequestDefaultTypeInternal _GetEventsForHeightRangeRequest_default_instance_;
constexpr GetEventsForBlockIdsRequest::GetEventsForBlockIdsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_ids_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEventsForBlockIdsRequestDefaultTypeInternal {
  constexpr GetEventsForBlockIdsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEventsForBlockIdsRequestDefaultTypeInternal() {}
  union {
    GetEventsForBlockIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEventsForBlockIdsRequestDefaultTypeInternal _GetEventsForBlockIdsRequest_default_instance_;
constexpr GetNetworkParametersResponse::GetNetworkParametersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetNetworkParametersResponseDefaultTypeInternal {
  constexpr GetNetworkParametersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetworkParametersResponseDefaultTypeInternal() {}
  union {
    GetNetworkParametersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetworkParametersResponseDefaultTypeInternal _GetNetworkParametersResponse_default_instance_;
constexpr GetNetworkParametersRequest::GetNetworkParametersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetNetworkParametersRequestDefaultTypeInternal {
  constexpr GetNetworkParametersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetworkParametersRequestDefaultTypeInternal() {}
  union {
    GetNetworkParametersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetworkParametersRequestDefaultTypeInternal _GetNetworkParametersRequest_default_instance_;
constexpr ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serializedsnapshot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProtocolStateSnapshotResponseDefaultTypeInternal {
  constexpr ProtocolStateSnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolStateSnapshotResponseDefaultTypeInternal() {}
  union {
    ProtocolStateSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolStateSnapshotResponseDefaultTypeInternal _ProtocolStateSnapshotResponse_default_instance_;
constexpr GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLatestProtocolStateSnapshotRequestDefaultTypeInternal {
  constexpr GetLatestProtocolStateSnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLatestProtocolStateSnapshotRequestDefaultTypeInternal() {}
  union {
    GetLatestProtocolStateSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLatestProtocolStateSnapshotRequestDefaultTypeInternal _GetLatestProtocolStateSnapshotRequest_default_instance_;
constexpr ExecutionResultForBlockIdResponse::ExecutionResultForBlockIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_result_(nullptr){}
struct ExecutionResultForBlockIdResponseDefaultTypeInternal {
  constexpr ExecutionResultForBlockIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionResultForBlockIdResponseDefaultTypeInternal() {}
  union {
    ExecutionResultForBlockIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionResultForBlockIdResponseDefaultTypeInternal _ExecutionResultForBlockIdResponse_default_instance_;
constexpr GetExecutionResultForBlockIdRequest::GetExecutionResultForBlockIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetExecutionResultForBlockIdRequestDefaultTypeInternal {
  constexpr GetExecutionResultForBlockIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExecutionResultForBlockIdRequestDefaultTypeInternal() {}
  union {
    GetExecutionResultForBlockIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExecutionResultForBlockIdRequestDefaultTypeInternal _GetExecutionResultForBlockIdRequest_default_instance_;
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_guarantees_()
  , block_seals_()
  , signatures_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , height_(PROTOBUF_ULONGLONG(0)){}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
constexpr BlockHeader::BlockHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(PROTOBUF_ULONGLONG(0)){}
struct BlockHeaderDefaultTypeInternal {
  constexpr BlockHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderDefaultTypeInternal() {}
  union {
    BlockHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
constexpr BlockSeal::BlockSeal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_receipt_signatures_()
  , result_approval_signatures_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , execution_receipt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlockSealDefaultTypeInternal {
  constexpr BlockSealDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockSealDefaultTypeInternal() {}
  union {
    BlockSeal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockSealDefaultTypeInternal _BlockSeal_default_instance_;
constexpr Collection::Collection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_ids_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CollectionDefaultTypeInternal {
  constexpr CollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionDefaultTypeInternal() {}
  union {
    Collection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionDefaultTypeInternal _Collection_default_instance_;
constexpr CollectionGuarantee::CollectionGuarantee(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , collection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CollectionGuaranteeDefaultTypeInternal {
  constexpr CollectionGuaranteeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionGuaranteeDefaultTypeInternal() {}
  union {
    CollectionGuarantee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionGuaranteeDefaultTypeInternal _CollectionGuarantee_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , authorizers_()
  , payload_signatures_()
  , envelope_signatures_()
  , script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proposal_key_(nullptr)
  , gas_limit_(PROTOBUF_ULONGLONG(0)){}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
constexpr TransactionProposalKey::TransactionProposalKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_number_(PROTOBUF_ULONGLONG(0))
  , key_id_(0u){}
struct TransactionProposalKeyDefaultTypeInternal {
  constexpr TransactionProposalKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionProposalKeyDefaultTypeInternal() {}
  union {
    TransactionProposalKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionProposalKeyDefaultTypeInternal _TransactionProposalKey_default_instance_;
constexpr TransactionSignature::TransactionSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_id_(0u){}
struct TransactionSignatureDefaultTypeInternal {
  constexpr TransactionSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionSignatureDefaultTypeInternal() {}
  union {
    TransactionSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionSignatureDefaultTypeInternal _TransactionSignature_default_instance_;
constexpr Account_ContractsEntry_DoNotUse::Account_ContractsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_ContractsEntry_DoNotUseDefaultTypeInternal {
  constexpr Account_ContractsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_ContractsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_ContractsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_ContractsEntry_DoNotUseDefaultTypeInternal _Account_ContractsEntry_DoNotUse_default_instance_;
constexpr Account::Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , contracts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(PROTOBUF_ULONGLONG(0)){}
struct AccountDefaultTypeInternal {
  constexpr AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDefaultTypeInternal _Account_default_instance_;
constexpr AccountKey::AccountKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , sign_algo_(0u)
  , hash_algo_(0u)
  , weight_(0u)
  , sequence_number_(0u)
  , revoked_(false){}
struct AccountKeyDefaultTypeInternal {
  constexpr AccountKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountKeyDefaultTypeInternal() {}
  union {
    AccountKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountKeyDefaultTypeInternal _AccountKey_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_index_(0u)
  , event_index_(0u){}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr ExecutionResult::ExecutionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , service_events_()
  , previous_result_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecutionResultDefaultTypeInternal {
  constexpr ExecutionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionResultDefaultTypeInternal() {}
  union {
    ExecutionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionResultDefaultTypeInternal _ExecutionResult_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_collection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_computation_used_(PROTOBUF_ULONGLONG(0))
  , number_of_transactions_(PROTOBUF_ULONGLONG(0))
  , index_(PROTOBUF_ULONGLONG(0)){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr ServiceEvent::ServiceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServiceEventDefaultTypeInternal {
  constexpr ServiceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceEventDefaultTypeInternal() {}
  union {
    ServiceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceEventDefaultTypeInternal _ServiceEvent_default_instance_;
constexpr Timestamp::Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(PROTOBUF_LONGLONG(0))
  , nanos_(0){}
struct TimestampDefaultTypeInternal {
  constexpr TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace access
}  // namespace flow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2eproto[50];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeaderResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockHeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockHeaderRequest, is_sealed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockHeaderByHeightRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestBlockRequest, is_sealed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetBlockByHeightRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionResponse, collection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetCollectionByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetCollectionByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::SendTransactionRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetTransactionRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, status_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionResultResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtLatestBlockRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, address_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetAccountAtBlockHeightRequest, block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtLatestBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtLatestBlockRequest, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIdRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockIdRequest, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, block_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecuteScriptAtBlockHeightRequest, script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, events_),
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse_Result, block_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::EventsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, start_height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForHeightRangeRequest, end_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIdsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::GetEventsForBlockIdsRequest, block_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersResponse, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetNetworkParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ProtocolStateSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ProtocolStateSnapshotResponse, serializedsnapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetLatestProtocolStateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResultForBlockIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResultForBlockIdResponse, execution_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetExecutionResultForBlockIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::GetExecutionResultForBlockIdRequest, block_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, parent_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, height_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, timestamp_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, collection_guarantees_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, block_seals_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Block, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeader, id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeader, parent_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockHeader, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockSeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockSeal, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockSeal, execution_receipt_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockSeal, execution_receipt_signatures_),
  PROTOBUF_FIELD_OFFSET(::flow::access::BlockSeal, result_approval_signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Collection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Collection, id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Collection, transaction_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionGuarantee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionGuarantee, collection_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::CollectionGuarantee, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, script_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, arguments_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, reference_block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, proposal_key_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, payer_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, authorizers_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, payload_signatures_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Transaction, envelope_signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionProposalKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionProposalKey, address_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionProposalKey, key_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionProposalKey, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionSignature, address_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionSignature, key_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::TransactionSignature, signature_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account_ContractsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account_ContractsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Account_ContractsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account_ContractsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, address_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, code_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, keys_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Account, contracts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, public_key_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, sign_algo_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, hash_algo_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, weight_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::flow::access::AccountKey, revoked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, transaction_index_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, event_index_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Event, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResult, previous_result_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResult, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResult, chunks_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ExecutionResult, service_events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, start_state_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, event_collection_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, block_id_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, total_computation_used_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, number_of_transactions_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, index_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Chunk, end_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::ServiceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::ServiceEvent, type_),
  PROTOBUF_FIELD_OFFSET(::flow::access::ServiceEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow::access::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flow::access::Timestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::flow::access::Timestamp, nanos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flow::access::PingRequest)},
  { 5, -1, sizeof(::flow::access::PingResponse)},
  { 10, -1, sizeof(::flow::access::BlockHeaderResponse)},
  { 16, -1, sizeof(::flow::access::GetLatestBlockHeaderRequest)},
  { 22, -1, sizeof(::flow::access::GetBlockHeaderByIdRequest)},
  { 28, -1, sizeof(::flow::access::GetBlockHeaderByHeightRequest)},
  { 34, -1, sizeof(::flow::access::BlockResponse)},
  { 40, -1, sizeof(::flow::access::GetLatestBlockRequest)},
  { 46, -1, sizeof(::flow::access::GetBlockByIdRequest)},
  { 52, -1, sizeof(::flow::access::GetBlockByHeightRequest)},
  { 58, -1, sizeof(::flow::access::CollectionResponse)},
  { 64, -1, sizeof(::flow::access::GetCollectionByIdRequest)},
  { 70, -1, sizeof(::flow::access::SendTransactionResponse)},
  { 76, -1, sizeof(::flow::access::SendTransactionRequest)},
  { 82, -1, sizeof(::flow::access::GetTransactionRequest)},
  { 88, -1, sizeof(::flow::access::TransactionResponse)},
  { 94, -1, sizeof(::flow::access::TransactionResultResponse)},
  { 103, -1, sizeof(::flow::access::AccountResponse)},
  { 109, -1, sizeof(::flow::access::GetAccountAtLatestBlockRequest)},
  { 115, -1, sizeof(::flow::access::GetAccountAtBlockHeightRequest)},
  { 122, -1, sizeof(::flow::access::ExecuteScriptResponse)},
  { 128, -1, sizeof(::flow::access::ExecuteScriptAtLatestBlockRequest)},
  { 134, -1, sizeof(::flow::access::ExecuteScriptAtBlockIdRequest)},
  { 141, -1, sizeof(::flow::access::ExecuteScriptAtBlockHeightRequest)},
  { 148, -1, sizeof(::flow::access::EventsResponse_Result)},
  { 157, -1, sizeof(::flow::access::EventsResponse)},
  { 163, -1, sizeof(::flow::access::GetEventsForHeightRangeRequest)},
  { 171, -1, sizeof(::flow::access::GetEventsForBlockIdsRequest)},
  { 178, -1, sizeof(::flow::access::GetNetworkParametersResponse)},
  { 184, -1, sizeof(::flow::access::GetNetworkParametersRequest)},
  { 189, -1, sizeof(::flow::access::ProtocolStateSnapshotResponse)},
  { 195, -1, sizeof(::flow::access::GetLatestProtocolStateSnapshotRequest)},
  { 200, -1, sizeof(::flow::access::ExecutionResultForBlockIdResponse)},
  { 206, -1, sizeof(::flow::access::GetExecutionResultForBlockIdRequest)},
  { 212, -1, sizeof(::flow::access::Block)},
  { 224, -1, sizeof(::flow::access::BlockHeader)},
  { 232, -1, sizeof(::flow::access::BlockSeal)},
  { 241, -1, sizeof(::flow::access::Collection)},
  { 248, -1, sizeof(::flow::access::CollectionGuarantee)},
  { 255, -1, sizeof(::flow::access::Transaction)},
  { 269, -1, sizeof(::flow::access::TransactionProposalKey)},
  { 277, -1, sizeof(::flow::access::TransactionSignature)},
  { 285, 292, sizeof(::flow::access::Account_ContractsEntry_DoNotUse)},
  { 294, -1, sizeof(::flow::access::Account)},
  { 304, -1, sizeof(::flow::access::AccountKey)},
  { 316, -1, sizeof(::flow::access::Event)},
  { 326, -1, sizeof(::flow::access::ExecutionResult)},
  { 335, -1, sizeof(::flow::access::Chunk)},
  { 347, -1, sizeof(::flow::access::ServiceEvent)},
  { 354, -1, sizeof(::flow::access::Timestamp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockHeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestBlockHeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockHeaderByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockHeaderByHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetBlockByHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_CollectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetCollectionByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_SendTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_SendTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_AccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountAtLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetAccountAtBlockHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtLatestBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtBlockIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecuteScriptAtBlockHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_EventsResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_EventsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetEventsForHeightRangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetEventsForBlockIdsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetNetworkParametersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetNetworkParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ProtocolStateSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetLatestProtocolStateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecutionResultForBlockIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_GetExecutionResultForBlockIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_BlockSeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Collection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_CollectionGuarantee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionProposalKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_TransactionSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Account_ContractsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_AccountKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ExecutionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_ServiceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow::access::_Timestamp_default_instance_),
};

const char descriptor_table_protodef_flow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nflow.proto\022\013flow.access\"\r\n\013PingRequest"
  "\"\016\n\014PingResponse\">\n\023BlockHeaderResponse\022"
  "\'\n\005block\030\001 \001(\0132\030.flow.access.BlockHeader"
  "\"0\n\033GetLatestBlockHeaderRequest\022\021\n\tis_se"
  "aled\030\001 \001(\010\"\'\n\031GetBlockHeaderByIdRequest\022"
  "\n\n\002id\030\001 \001(\014\"/\n\035GetBlockHeaderByHeightReq"
  "uest\022\016\n\006height\030\001 \001(\004\"2\n\rBlockResponse\022!\n"
  "\005block\030\001 \001(\0132\022.flow.access.Block\"*\n\025GetL"
  "atestBlockRequest\022\021\n\tis_sealed\030\001 \001(\010\"!\n\023"
  "GetBlockByIdRequest\022\n\n\002id\030\001 \001(\014\")\n\027GetBl"
  "ockByHeightRequest\022\016\n\006height\030\001 \001(\004\"A\n\022Co"
  "llectionResponse\022+\n\ncollection\030\001 \001(\0132\027.f"
  "low.access.Collection\"&\n\030GetCollectionBy"
  "IdRequest\022\n\n\002id\030\001 \001(\014\"%\n\027SendTransaction"
  "Response\022\n\n\002id\030\001 \001(\014\"G\n\026SendTransactionR"
  "equest\022-\n\013transaction\030\001 \001(\0132\030.flow.acces"
  "s.Transaction\"#\n\025GetTransactionRequest\022\n"
  "\n\002id\030\001 \001(\014\"D\n\023TransactionResponse\022-\n\013tra"
  "nsaction\030\001 \001(\0132\030.flow.access.Transaction"
  "\"\233\001\n\031TransactionResultResponse\022.\n\006status"
  "\030\001 \001(\0162\036.flow.access.TransactionStatus\022\023"
  "\n\013status_code\030\002 \001(\r\022\025\n\rerror_message\030\003 \001"
  "(\t\022\"\n\006events\030\004 \003(\0132\022.flow.access.Event\"8"
  "\n\017AccountResponse\022%\n\007account\030\001 \001(\0132\024.flo"
  "w.access.Account\"1\n\036GetAccountAtLatestBl"
  "ockRequest\022\017\n\007address\030\001 \001(\014\"G\n\036GetAccoun"
  "tAtBlockHeightRequest\022\017\n\007address\030\001 \001(\014\022\024"
  "\n\014block_height\030\002 \001(\004\"&\n\025ExecuteScriptRes"
  "ponse\022\r\n\005value\030\001 \001(\014\"3\n!ExecuteScriptAtL"
  "atestBlockRequest\022\016\n\006script\030\001 \001(\014\"A\n\035Exe"
  "cuteScriptAtBlockIdRequest\022\020\n\010block_id\030\001"
  " \001(\014\022\016\n\006script\030\002 \001(\014\"I\n!ExecuteScriptAtB"
  "lockHeightRequest\022\024\n\014block_height\030\001 \001(\004\022"
  "\016\n\006script\030\002 \001(\014\"\315\001\n\016EventsResponse\0223\n\007re"
  "sults\030\001 \003(\0132\".flow.access.EventsResponse"
  ".Result\032\205\001\n\006Result\022\020\n\010block_id\030\001 \001(\014\022\024\n\014"
  "block_height\030\002 \001(\004\022\"\n\006events\030\003 \003(\0132\022.flo"
  "w.access.Event\022/\n\017block_timestamp\030\004 \001(\0132"
  "\026.flow.access.Timestamp\"X\n\036GetEventsForH"
  "eightRangeRequest\022\014\n\004type\030\001 \001(\t\022\024\n\014start"
  "_height\030\002 \001(\004\022\022\n\nend_height\030\003 \001(\004\">\n\033Get"
  "EventsForBlockIdsRequest\022\014\n\004type\030\001 \001(\t\022\021"
  "\n\tblock_ids\030\002 \003(\014\"0\n\034GetNetworkParameter"
  "sResponse\022\020\n\010chain_id\030\001 \001(\t\"\035\n\033GetNetwor"
  "kParametersRequest\";\n\035ProtocolStateSnaps"
  "hotResponse\022\032\n\022serializedSnapshot\030\001 \001(\014\""
  "\'\n%GetLatestProtocolStateSnapshotRequest"
  "\"[\n!ExecutionResultForBlockIdResponse\0226\n"
  "\020execution_result\030\001 \001(\0132\034.flow.access.Ex"
  "ecutionResult\"7\n#GetExecutionResultForBl"
  "ockIdRequest\022\020\n\010block_id\030\001 \001(\014\"\343\001\n\005Block"
  "\022\n\n\002id\030\001 \001(\014\022\021\n\tparent_id\030\002 \001(\014\022\016\n\006heigh"
  "t\030\003 \001(\004\022)\n\ttimestamp\030\004 \001(\0132\026.flow.access"
  ".Timestamp\022\?\n\025collection_guarantees\030\005 \003("
  "\0132 .flow.access.CollectionGuarantee\022+\n\013b"
  "lock_seals\030\006 \003(\0132\026.flow.access.BlockSeal"
  "\022\022\n\nsignatures\030\007 \003(\014\"<\n\013BlockHeader\022\n\n\002i"
  "d\030\001 \001(\014\022\021\n\tparent_id\030\002 \001(\014\022\016\n\006height\030\003 \001"
  "(\004\"\205\001\n\tBlockSeal\022\020\n\010block_id\030\001 \001(\014\022\034\n\024ex"
  "ecution_receipt_id\030\002 \001(\014\022$\n\034execution_re"
  "ceipt_signatures\030\003 \003(\014\022\"\n\032result_approva"
  "l_signatures\030\004 \003(\014\"1\n\nCollection\022\n\n\002id\030\001"
  " \001(\014\022\027\n\017transaction_ids\030\002 \003(\014\"@\n\023Collect"
  "ionGuarantee\022\025\n\rcollection_id\030\001 \001(\014\022\022\n\ns"
  "ignatures\030\002 \003(\014\"\275\002\n\013Transaction\022\016\n\006scrip"
  "t\030\001 \001(\014\022\021\n\targuments\030\002 \003(\014\022\032\n\022reference_"
  "block_id\030\003 \001(\014\022\021\n\tgas_limit\030\004 \001(\004\0229\n\014pro"
  "posal_key\030\005 \001(\0132#.flow.access.Transactio"
  "nProposalKey\022\r\n\005payer\030\006 \001(\014\022\023\n\013authorize"
  "rs\030\007 \003(\014\022=\n\022payload_signatures\030\010 \003(\0132!.f"
  "low.access.TransactionSignature\022>\n\023envel"
  "ope_signatures\030\t \003(\0132!.flow.access.Trans"
  "actionSignature\"R\n\026TransactionProposalKe"
  "y\022\017\n\007address\030\001 \001(\014\022\016\n\006key_id\030\002 \001(\r\022\027\n\017se"
  "quence_number\030\003 \001(\004\"J\n\024TransactionSignat"
  "ure\022\017\n\007address\030\001 \001(\014\022\016\n\006key_id\030\002 \001(\r\022\021\n\t"
  "signature\030\003 \001(\014\"\312\001\n\007Account\022\017\n\007address\030\001"
  " \001(\014\022\017\n\007balance\030\002 \001(\004\022\014\n\004code\030\003 \001(\014\022%\n\004k"
  "eys\030\004 \003(\0132\027.flow.access.AccountKey\0226\n\tco"
  "ntracts\030\005 \003(\0132#.flow.access.Account.Cont"
  "ractsEntry\0320\n\016ContractsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\214\001\n\nAccountKey\022\n\n\002i"
  "d\030\001 \001(\r\022\022\n\npublic_key\030\002 \001(\014\022\021\n\tsign_algo"
  "\030\003 \001(\r\022\021\n\thash_algo\030\004 \001(\r\022\016\n\006weight\030\005 \001("
  "\r\022\027\n\017sequence_number\030\006 \001(\r\022\017\n\007revoked\030\007 "
  "\001(\010\"n\n\005Event\022\014\n\004type\030\001 \001(\t\022\026\n\016transactio"
  "n_id\030\002 \001(\014\022\031\n\021transaction_index\030\003 \001(\r\022\023\n"
  "\013event_index\030\004 \001(\r\022\017\n\007payload\030\005 \001(\014\"\226\001\n\017"
  "ExecutionResult\022\032\n\022previous_result_id\030\001 "
  "\001(\014\022\020\n\010block_id\030\002 \001(\014\022\"\n\006chunks\030\003 \003(\0132\022."
  "flow.access.Chunk\0221\n\016service_events\030\004 \003("
  "\0132\031.flow.access.ServiceEvent\"\252\001\n\005Chunk\022\023"
  "\n\013start_state\030\001 \001(\014\022\030\n\020event_collection\030"
  "\002 \001(\014\022\020\n\010block_id\030\003 \001(\014\022\036\n\026total_computa"
  "tion_used\030\004 \001(\004\022\036\n\026number_of_transaction"
  "s\030\005 \001(\004\022\r\n\005index\030\006 \001(\004\022\021\n\tend_state\030\007 \001("
  "\014\"-\n\014ServiceEvent\022\014\n\004type\030\001 \001(\t\022\017\n\007paylo"
  "ad\030\002 \001(\014\"+\n\tTimestamp\022\017\n\007seconds\030\001 \001(\003\022\r"
  "\n\005nanos\030\002 \001(\005*c\n\021TransactionStatus\022\013\n\007UN"
  "KNOWN\020\000\022\013\n\007PENDING\020\001\022\r\n\tFINALIZED\020\002\022\014\n\010E"
  "XECUTED\020\003\022\n\n\006SEALED\020\004\022\013\n\007EXPIRED\020\0052\262\020\n\tA"
  "ccessAPI\022;\n\004Ping\022\030.flow.access.PingReque"
  "st\032\031.flow.access.PingResponse\022b\n\024GetLate"
  "stBlockHeader\022(.flow.access.GetLatestBlo"
  "ckHeaderRequest\032 .flow.access.BlockHeade"
  "rResponse\022^\n\022GetBlockHeaderByID\022&.flow.a"
  "ccess.GetBlockHeaderByIdRequest\032 .flow.a"
  "ccess.BlockHeaderResponse\022f\n\026GetBlockHea"
  "derByHeight\022*.flow.access.GetBlockHeader"
  "ByHeightRequest\032 .flow.access.BlockHeade"
  "rResponse\022P\n\016GetLatestBlock\022\".flow.acces"
  "s.GetLatestBlockRequest\032\032.flow.access.Bl"
  "ockResponse\022L\n\014GetBlockByID\022 .flow.acces"
  "s.GetBlockByIdRequest\032\032.flow.access.Bloc"
  "kResponse\022T\n\020GetBlockByHeight\022$.flow.acc"
  "ess.GetBlockByHeightRequest\032\032.flow.acces"
  "s.BlockResponse\022[\n\021GetCollectionByID\022%.f"
  "low.access.GetCollectionByIdRequest\032\037.fl"
  "ow.access.CollectionResponse\022\\\n\017SendTran"
  "saction\022#.flow.access.SendTransactionReq"
  "uest\032$.flow.access.SendTransactionRespon"
  "se\022V\n\016GetTransaction\022\".flow.access.GetTr"
  "ansactionRequest\032 .flow.access.Transacti"
  "onResponse\022b\n\024GetTransactionResult\022\".flo"
  "w.access.GetTransactionRequest\032&.flow.ac"
  "cess.TransactionResultResponse\022d\n\027GetAcc"
  "ountAtLatestBlock\022+.flow.access.GetAccou"
  "ntAtLatestBlockRequest\032\034.flow.access.Acc"
  "ountResponse\022d\n\027GetAccountAtBlockHeight\022"
  "+.flow.access.GetAccountAtBlockHeightReq"
  "uest\032\034.flow.access.AccountResponse\022p\n\032Ex"
  "ecuteScriptAtLatestBlock\022..flow.access.E"
  "xecuteScriptAtLatestBlockRequest\032\".flow."
  "access.ExecuteScriptResponse\022h\n\026ExecuteS"
  "criptAtBlockID\022*.flow.access.ExecuteScri"
  "ptAtBlockIdRequest\032\".flow.access.Execute"
  "ScriptResponse\022p\n\032ExecuteScriptAtBlockHe"
  "ight\022..flow.access.ExecuteScriptAtBlockH"
  "eightRequest\032\".flow.access.ExecuteScript"
  "Response\022c\n\027GetEventsForHeightRange\022+.fl"
  "ow.access.GetEventsForHeightRangeRequest"
  "\032\033.flow.access.EventsResponse\022]\n\024GetEven"
  "tsForBlockIDs\022(.flow.access.GetEventsFor"
  "BlockIdsRequest\032\033.flow.access.EventsResp"
  "onse\022k\n\024GetNetworkParameters\022(.flow.acce"
  "ss.GetNetworkParametersRequest\032).flow.ac"
  "cess.GetNetworkParametersResponse\022\200\001\n\036Ge"
  "tLatestProtocolStateSnapshot\0222.flow.acce"
  "ss.GetLatestProtocolStateSnapshotRequest"
  "\032*.flow.access.ProtocolStateSnapshotResp"
  "onse\022\200\001\n\034GetExecutionResultForBlockID\0220."
  "flow.access.GetExecutionResultForBlockId"
  "Request\032..flow.access.ExecutionResultFor"
  "BlockIdResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2eproto = {
  false, false, 6143, descriptor_table_protodef_flow_2eproto, "flow.proto", 
  &descriptor_table_flow_2eproto_once, nullptr, 0, 50,
  schemas, file_default_instances, TableStruct_flow_2eproto::offsets,
  file_level_metadata_flow_2eproto, file_level_enum_descriptors_flow_2eproto, file_level_service_descriptors_flow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_flow_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flow_2eproto);
  return descriptor_table_flow_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_2eproto(&descriptor_table_flow_2eproto);
namespace flow {
namespace access {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flow_2eproto);
  return file_level_enum_descriptors_flow_2eproto[0];
}
bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.PingRequest)
}

void PingRequest::SharedCtor() {
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:flow.access.PingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PingRequest::ArenaDtor(void* object) {
  PingRequest* _this = reinterpret_cast< PingRequest* >(object);
  (void)_this;
}
void PingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.PingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.PingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.PingResponse)
}

void PingResponse::SharedCtor() {
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:flow.access.PingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PingResponse::ArenaDtor(void* object) {
  PingResponse* _this = reinterpret_cast< PingResponse* >(object);
  (void)_this;
}
void PingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.PingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.PingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeaderResponse::_Internal {
 public:
  static const ::flow::access::BlockHeader& block(const BlockHeaderResponse* msg);
};

const ::flow::access::BlockHeader&
BlockHeaderResponse::_Internal::block(const BlockHeaderResponse* msg) {
  return *msg->block_;
}
BlockHeaderResponse::BlockHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockHeaderResponse)
}
BlockHeaderResponse::BlockHeaderResponse(const BlockHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::flow::access::BlockHeader(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockHeaderResponse)
}

void BlockHeaderResponse::SharedCtor() {
block_ = nullptr;
}

BlockHeaderResponse::~BlockHeaderResponse() {
  // @@protoc_insertion_point(destructor:flow.access.BlockHeaderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockHeaderResponse::ArenaDtor(void* object) {
  BlockHeaderResponse* _this = reinterpret_cast< BlockHeaderResponse* >(object);
  (void)_this;
}
void BlockHeaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.BlockHeader block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeaderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.BlockHeader block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockHeaderResponse)
  return target;
}

size_t BlockHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockHeaderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.BlockHeader block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeaderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.BlockHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeaderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeaderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.BlockHeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.BlockHeaderResponse)
    MergeFrom(*source);
  }
}

void BlockHeaderResponse::MergeFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::flow::access::BlockHeader::MergeFrom(from._internal_block());
  }
}

void BlockHeaderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.BlockHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeaderResponse::CopyFrom(const BlockHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeaderResponse::IsInitialized() const {
  return true;
}

void BlockHeaderResponse::InternalSwap(BlockHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeaderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLatestBlockHeaderRequest::_Internal {
 public:
};

GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestBlockHeaderRequest)
}
GetLatestBlockHeaderRequest::GetLatestBlockHeaderRequest(const GetLatestBlockHeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_sealed_ = from.is_sealed_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestBlockHeaderRequest)
}

void GetLatestBlockHeaderRequest::SharedCtor() {
is_sealed_ = false;
}

GetLatestBlockHeaderRequest::~GetLatestBlockHeaderRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetLatestBlockHeaderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLatestBlockHeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLatestBlockHeaderRequest::ArenaDtor(void* object) {
  GetLatestBlockHeaderRequest* _this = reinterpret_cast< GetLatestBlockHeaderRequest* >(object);
  (void)_this;
}
void GetLatestBlockHeaderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestBlockHeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestBlockHeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_sealed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestBlockHeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_sealed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestBlockHeaderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetLatestBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->is_sealed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sealed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetLatestBlockHeaderRequest)
  return target;
}

size_t GetLatestBlockHeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetLatestBlockHeaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->is_sealed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLatestBlockHeaderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetLatestBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLatestBlockHeaderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLatestBlockHeaderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetLatestBlockHeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetLatestBlockHeaderRequest)
    MergeFrom(*source);
  }
}

void GetLatestBlockHeaderRequest::MergeFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetLatestBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_sealed() != 0) {
    _internal_set_is_sealed(from._internal_is_sealed());
  }
}

void GetLatestBlockHeaderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetLatestBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestBlockHeaderRequest::CopyFrom(const GetLatestBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetLatestBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestBlockHeaderRequest::IsInitialized() const {
  return true;
}

void GetLatestBlockHeaderRequest::InternalSwap(GetLatestBlockHeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_sealed_, other->is_sealed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestBlockHeaderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockHeaderByIdRequest::_Internal {
 public:
};

GetBlockHeaderByIdRequest::GetBlockHeaderByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockHeaderByIdRequest)
}
GetBlockHeaderByIdRequest::GetBlockHeaderByIdRequest(const GetBlockHeaderByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockHeaderByIdRequest)
}

void GetBlockHeaderByIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockHeaderByIdRequest::~GetBlockHeaderByIdRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockHeaderByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockHeaderByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockHeaderByIdRequest::ArenaDtor(void* object) {
  GetBlockHeaderByIdRequest* _this = reinterpret_cast< GetBlockHeaderByIdRequest* >(object);
  (void)_this;
}
void GetBlockHeaderByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaderByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockHeaderByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockHeaderByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaderByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockHeaderByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockHeaderByIdRequest)
  return target;
}

size_t GetBlockHeaderByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockHeaderByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockHeaderByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetBlockHeaderByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockHeaderByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockHeaderByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetBlockHeaderByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetBlockHeaderByIdRequest)
    MergeFrom(*source);
  }
}

void GetBlockHeaderByIdRequest::MergeFrom(const GetBlockHeaderByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockHeaderByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBlockHeaderByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetBlockHeaderByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockHeaderByIdRequest::CopyFrom(const GetBlockHeaderByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockHeaderByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderByIdRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderByIdRequest::InternalSwap(GetBlockHeaderByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockHeaderByHeightRequest::_Internal {
 public:
};

GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockHeaderByHeightRequest)
}
GetBlockHeaderByHeightRequest::GetBlockHeaderByHeightRequest(const GetBlockHeaderByHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockHeaderByHeightRequest)
}

void GetBlockHeaderByHeightRequest::SharedCtor() {
height_ = PROTOBUF_ULONGLONG(0);
}

GetBlockHeaderByHeightRequest::~GetBlockHeaderByHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockHeaderByHeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockHeaderByHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockHeaderByHeightRequest::ArenaDtor(void* object) {
  GetBlockHeaderByHeightRequest* _this = reinterpret_cast< GetBlockHeaderByHeightRequest* >(object);
  (void)_this;
}
void GetBlockHeaderByHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaderByHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockHeaderByHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockHeaderByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaderByHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderByHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockHeaderByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockHeaderByHeightRequest)
  return target;
}

size_t GetBlockHeaderByHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockHeaderByHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockHeaderByHeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetBlockHeaderByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockHeaderByHeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockHeaderByHeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetBlockHeaderByHeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetBlockHeaderByHeightRequest)
    MergeFrom(*source);
  }
}

void GetBlockHeaderByHeightRequest::MergeFrom(const GetBlockHeaderByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockHeaderByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetBlockHeaderByHeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetBlockHeaderByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockHeaderByHeightRequest::CopyFrom(const GetBlockHeaderByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockHeaderByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderByHeightRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderByHeightRequest::InternalSwap(GetBlockHeaderByHeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderByHeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockResponse::_Internal {
 public:
  static const ::flow::access::Block& block(const BlockResponse* msg);
};

const ::flow::access::Block&
BlockResponse::_Internal::block(const BlockResponse* msg) {
  return *msg->block_;
}
BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::flow::access::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockResponse)
}

void BlockResponse::SharedCtor() {
block_ = nullptr;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:flow.access.BlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.Block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.BlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.BlockResponse)
    MergeFrom(*source);
  }
}

void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::flow::access::Block::MergeFrom(from._internal_block());
  }
}

void BlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLatestBlockRequest::_Internal {
 public:
};

GetLatestBlockRequest::GetLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestBlockRequest)
}
GetLatestBlockRequest::GetLatestBlockRequest(const GetLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_sealed_ = from.is_sealed_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestBlockRequest)
}

void GetLatestBlockRequest::SharedCtor() {
is_sealed_ = false;
}

GetLatestBlockRequest::~GetLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetLatestBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLatestBlockRequest::ArenaDtor(void* object) {
  GetLatestBlockRequest* _this = reinterpret_cast< GetLatestBlockRequest* >(object);
  (void)_this;
}
void GetLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_sealed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_sealed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->is_sealed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sealed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetLatestBlockRequest)
  return target;
}

size_t GetLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sealed = 1;
  if (this->is_sealed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLatestBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLatestBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLatestBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetLatestBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetLatestBlockRequest)
    MergeFrom(*source);
  }
}

void GetLatestBlockRequest::MergeFrom(const GetLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_sealed() != 0) {
    _internal_set_is_sealed(from._internal_is_sealed());
  }
}

void GetLatestBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestBlockRequest::CopyFrom(const GetLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestBlockRequest::IsInitialized() const {
  return true;
}

void GetLatestBlockRequest::InternalSwap(GetLatestBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_sealed_, other->is_sealed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockByIdRequest::_Internal {
 public:
};

GetBlockByIdRequest::GetBlockByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockByIdRequest)
}
GetBlockByIdRequest::GetBlockByIdRequest(const GetBlockByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockByIdRequest)
}

void GetBlockByIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockByIdRequest::~GetBlockByIdRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockByIdRequest::ArenaDtor(void* object) {
  GetBlockByIdRequest* _this = reinterpret_cast< GetBlockByIdRequest* >(object);
  (void)_this;
}
void GetBlockByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockByIdRequest)
  return target;
}

size_t GetBlockByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetBlockByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetBlockByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetBlockByIdRequest)
    MergeFrom(*source);
  }
}

void GetBlockByIdRequest::MergeFrom(const GetBlockByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetBlockByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetBlockByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockByIdRequest::CopyFrom(const GetBlockByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockByIdRequest::IsInitialized() const {
  return true;
}

void GetBlockByIdRequest::InternalSwap(GetBlockByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockByHeightRequest::_Internal {
 public:
};

GetBlockByHeightRequest::GetBlockByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetBlockByHeightRequest)
}
GetBlockByHeightRequest::GetBlockByHeightRequest(const GetBlockByHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetBlockByHeightRequest)
}

void GetBlockByHeightRequest::SharedCtor() {
height_ = PROTOBUF_ULONGLONG(0);
}

GetBlockByHeightRequest::~GetBlockByHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetBlockByHeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockByHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockByHeightRequest::ArenaDtor(void* object) {
  GetBlockByHeightRequest* _this = reinterpret_cast< GetBlockByHeightRequest* >(object);
  (void)_this;
}
void GetBlockByHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockByHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockByHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetBlockByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockByHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockByHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetBlockByHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetBlockByHeightRequest)
  return target;
}

size_t GetBlockByHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetBlockByHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockByHeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetBlockByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockByHeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockByHeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetBlockByHeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetBlockByHeightRequest)
    MergeFrom(*source);
  }
}

void GetBlockByHeightRequest::MergeFrom(const GetBlockByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetBlockByHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetBlockByHeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetBlockByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockByHeightRequest::CopyFrom(const GetBlockByHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetBlockByHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockByHeightRequest::IsInitialized() const {
  return true;
}

void GetBlockByHeightRequest::InternalSwap(GetBlockByHeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockByHeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CollectionResponse::_Internal {
 public:
  static const ::flow::access::Collection& collection(const CollectionResponse* msg);
};

const ::flow::access::Collection&
CollectionResponse::_Internal::collection(const CollectionResponse* msg) {
  return *msg->collection_;
}
CollectionResponse::CollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.CollectionResponse)
}
CollectionResponse::CollectionResponse(const CollectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_collection()) {
    collection_ = new ::flow::access::Collection(*from.collection_);
  } else {
    collection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.CollectionResponse)
}

void CollectionResponse::SharedCtor() {
collection_ = nullptr;
}

CollectionResponse::~CollectionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.CollectionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete collection_;
}

void CollectionResponse::ArenaDtor(void* object) {
  CollectionResponse* _this = reinterpret_cast< CollectionResponse* >(object);
  (void)_this;
}
void CollectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.CollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.Collection collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.CollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.Collection collection = 1;
  if (this->has_collection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::collection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.CollectionResponse)
  return target;
}

size_t CollectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.CollectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.Collection collection = 1;
  if (this->has_collection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.CollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.CollectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.CollectionResponse)
    MergeFrom(*source);
  }
}

void CollectionResponse::MergeFrom(const CollectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.CollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_collection()) {
    _internal_mutable_collection()->::flow::access::Collection::MergeFrom(from._internal_collection());
  }
}

void CollectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.CollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionResponse::CopyFrom(const CollectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.CollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionResponse::IsInitialized() const {
  return true;
}

void CollectionResponse::InternalSwap(CollectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(collection_, other->collection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCollectionByIdRequest::_Internal {
 public:
};

GetCollectionByIdRequest::GetCollectionByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetCollectionByIdRequest)
}
GetCollectionByIdRequest::GetCollectionByIdRequest(const GetCollectionByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetCollectionByIdRequest)
}

void GetCollectionByIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCollectionByIdRequest::~GetCollectionByIdRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetCollectionByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCollectionByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollectionByIdRequest::ArenaDtor(void* object) {
  GetCollectionByIdRequest* _this = reinterpret_cast< GetCollectionByIdRequest* >(object);
  (void)_this;
}
void GetCollectionByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCollectionByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCollectionByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetCollectionByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectionByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetCollectionByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetCollectionByIdRequest)
  return target;
}

size_t GetCollectionByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetCollectionByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectionByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetCollectionByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectionByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectionByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetCollectionByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetCollectionByIdRequest)
    MergeFrom(*source);
  }
}

void GetCollectionByIdRequest::MergeFrom(const GetCollectionByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetCollectionByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetCollectionByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetCollectionByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionByIdRequest::CopyFrom(const GetCollectionByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetCollectionByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionByIdRequest::IsInitialized() const {
  return true;
}

void GetCollectionByIdRequest::InternalSwap(GetCollectionByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendTransactionResponse::_Internal {
 public:
};

SendTransactionResponse::SendTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.SendTransactionResponse)
}
SendTransactionResponse::SendTransactionResponse(const SendTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.SendTransactionResponse)
}

void SendTransactionResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendTransactionResponse::~SendTransactionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.SendTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTransactionResponse::ArenaDtor(void* object) {
  SendTransactionResponse* _this = reinterpret_cast< SendTransactionResponse* >(object);
  (void)_this;
}
void SendTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.SendTransactionResponse)
  return target;
}

size_t SendTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.SendTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.SendTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.SendTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.SendTransactionResponse)
    MergeFrom(*source);
  }
}

void SendTransactionResponse::MergeFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.SendTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void SendTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.SendTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTransactionResponse::CopyFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.SendTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionResponse::IsInitialized() const {
  return true;
}

void SendTransactionResponse::InternalSwap(SendTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendTransactionRequest::_Internal {
 public:
  static const ::flow::access::Transaction& transaction(const SendTransactionRequest* msg);
};

const ::flow::access::Transaction&
SendTransactionRequest::_Internal::transaction(const SendTransactionRequest* msg) {
  return *msg->transaction_;
}
SendTransactionRequest::SendTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.SendTransactionRequest)
}
SendTransactionRequest::SendTransactionRequest(const SendTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::flow::access::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.SendTransactionRequest)
}

void SendTransactionRequest::SharedCtor() {
transaction_ = nullptr;
}

SendTransactionRequest::~SendTransactionRequest() {
  // @@protoc_insertion_point(destructor:flow.access.SendTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void SendTransactionRequest::ArenaDtor(void* object) {
  SendTransactionRequest* _this = reinterpret_cast< SendTransactionRequest* >(object);
  (void)_this;
}
void SendTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.SendTransactionRequest)
  return target;
}

size_t SendTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.SendTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.SendTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.SendTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.SendTransactionRequest)
    MergeFrom(*source);
  }
}

void SendTransactionRequest::MergeFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.SendTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::flow::access::Transaction::MergeFrom(from._internal_transaction());
  }
}

void SendTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.SendTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTransactionRequest::CopyFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.SendTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionRequest::IsInitialized() const {
  return true;
}

void SendTransactionRequest::InternalSwap(SendTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTransactionRequest::_Internal {
 public:
};

GetTransactionRequest::GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetTransactionRequest)
}
GetTransactionRequest::GetTransactionRequest(const GetTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetTransactionRequest)
}

void GetTransactionRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTransactionRequest::~GetTransactionRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionRequest::ArenaDtor(void* object) {
  GetTransactionRequest* _this = reinterpret_cast< GetTransactionRequest* >(object);
  (void)_this;
}
void GetTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetTransactionRequest)
  return target;
}

size_t GetTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetTransactionRequest)
    MergeFrom(*source);
  }
}

void GetTransactionRequest::MergeFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionRequest::CopyFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionRequest::IsInitialized() const {
  return true;
}

void GetTransactionRequest::InternalSwap(GetTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionResponse::_Internal {
 public:
  static const ::flow::access::Transaction& transaction(const TransactionResponse* msg);
};

const ::flow::access::Transaction&
TransactionResponse::_Internal::transaction(const TransactionResponse* msg) {
  return *msg->transaction_;
}
TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::flow::access::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionResponse)
}

void TransactionResponse::SharedCtor() {
transaction_ = nullptr;
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
}
void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.TransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.TransactionResponse)
    MergeFrom(*source);
  }
}

void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::flow::access::Transaction::MergeFrom(from._internal_transaction());
  }
}

void TransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionResultResponse::_Internal {
 public:
};

TransactionResultResponse::TransactionResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionResultResponse)
}
TransactionResultResponse::TransactionResultResponse(const TransactionResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionResultResponse)
}

void TransactionResultResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
}

TransactionResultResponse::~TransactionResultResponse() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionResultResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionResultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionResultResponse::ArenaDtor(void* object) {
  TransactionResultResponse* _this = reinterpret_cast< TransactionResultResponse* >(object);
  (void)_this;
}
void TransactionResultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  error_message_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.TransactionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::flow::access::TransactionStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.TransactionResultResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.Event events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResultResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.TransactionStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint32 status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status_code(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.TransactionResultResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // repeated .flow.access.Event events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionResultResponse)
  return target;
}

size_t TransactionResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionResultResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.Event events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .flow.access.TransactionStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResultResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.TransactionResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionResultResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionResultResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.TransactionResultResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.TransactionResultResponse)
    MergeFrom(*source);
  }
}

void TransactionResultResponse::MergeFrom(const TransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void TransactionResultResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.TransactionResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResultResponse::CopyFrom(const TransactionResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResultResponse::IsInitialized() const {
  return true;
}

void TransactionResultResponse::InternalSwap(TransactionResultResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionResultResponse, status_code_)
      + sizeof(TransactionResultResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(TransactionResultResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResultResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountResponse::_Internal {
 public:
  static const ::flow::access::Account& account(const AccountResponse* msg);
};

const ::flow::access::Account&
AccountResponse::_Internal::account(const AccountResponse* msg) {
  return *msg->account_;
}
AccountResponse::AccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.AccountResponse)
}
AccountResponse::AccountResponse(const AccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::flow::access::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.AccountResponse)
}

void AccountResponse::SharedCtor() {
account_ = nullptr;
}

AccountResponse::~AccountResponse() {
  // @@protoc_insertion_point(destructor:flow.access.AccountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void AccountResponse::ArenaDtor(void* object) {
  AccountResponse* _this = reinterpret_cast< AccountResponse* >(object);
  (void)_this;
}
void AccountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.Account account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.AccountResponse)
  return target;
}

size_t AccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.AccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.AccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.AccountResponse)
    MergeFrom(*source);
  }
}

void AccountResponse::MergeFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::flow::access::Account::MergeFrom(from._internal_account());
  }
}

void AccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {
  return true;
}

void AccountResponse::InternalSwap(AccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountAtLatestBlockRequest::_Internal {
 public:
};

GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountAtLatestBlockRequest)
}
GetAccountAtLatestBlockRequest::GetAccountAtLatestBlockRequest(const GetAccountAtLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountAtLatestBlockRequest)
}

void GetAccountAtLatestBlockRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccountAtLatestBlockRequest::~GetAccountAtLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountAtLatestBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountAtLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountAtLatestBlockRequest::ArenaDtor(void* object) {
  GetAccountAtLatestBlockRequest* _this = reinterpret_cast< GetAccountAtLatestBlockRequest* >(object);
  (void)_this;
}
void GetAccountAtLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountAtLatestBlockRequest)
  return target;
}

size_t GetAccountAtLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountAtLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountAtLatestBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetAccountAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountAtLatestBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountAtLatestBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetAccountAtLatestBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetAccountAtLatestBlockRequest)
    MergeFrom(*source);
  }
}

void GetAccountAtLatestBlockRequest::MergeFrom(const GetAccountAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void GetAccountAtLatestBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetAccountAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountAtLatestBlockRequest::CopyFrom(const GetAccountAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtLatestBlockRequest::IsInitialized() const {
  return true;
}

void GetAccountAtLatestBlockRequest::InternalSwap(GetAccountAtLatestBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtLatestBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountAtBlockHeightRequest::_Internal {
 public:
};

GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetAccountAtBlockHeightRequest)
}
GetAccountAtBlockHeightRequest::GetAccountAtBlockHeightRequest(const GetAccountAtBlockHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.GetAccountAtBlockHeightRequest)
}

void GetAccountAtBlockHeightRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_height_ = PROTOBUF_ULONGLONG(0);
}

GetAccountAtBlockHeightRequest::~GetAccountAtBlockHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetAccountAtBlockHeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountAtBlockHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccountAtBlockHeightRequest::ArenaDtor(void* object) {
  GetAccountAtBlockHeightRequest* _this = reinterpret_cast< GetAccountAtBlockHeightRequest* >(object);
  (void)_this;
}
void GetAccountAtBlockHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAtBlockHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAtBlockHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetAccountAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  block_height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAtBlockHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAtBlockHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetAccountAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 block_height = 2;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetAccountAtBlockHeightRequest)
  return target;
}

size_t GetAccountAtBlockHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetAccountAtBlockHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 block_height = 2;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountAtBlockHeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetAccountAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountAtBlockHeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountAtBlockHeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetAccountAtBlockHeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetAccountAtBlockHeightRequest)
    MergeFrom(*source);
  }
}

void GetAccountAtBlockHeightRequest::MergeFrom(const GetAccountAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetAccountAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void GetAccountAtBlockHeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetAccountAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountAtBlockHeightRequest::CopyFrom(const GetAccountAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetAccountAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAtBlockHeightRequest::IsInitialized() const {
  return true;
}

void GetAccountAtBlockHeightRequest::InternalSwap(GetAccountAtBlockHeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAtBlockHeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteScriptResponse::_Internal {
 public:
};

ExecuteScriptResponse::ExecuteScriptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptResponse)
}
ExecuteScriptResponse::ExecuteScriptResponse(const ExecuteScriptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptResponse)
}

void ExecuteScriptResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptResponse::~ExecuteScriptResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteScriptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptResponse::ArenaDtor(void* object) {
  ExecuteScriptResponse* _this = reinterpret_cast< ExecuteScriptResponse* >(object);
  (void)_this;
}
void ExecuteScriptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptResponse)
  return target;
}

size_t ExecuteScriptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteScriptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecuteScriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteScriptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteScriptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecuteScriptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecuteScriptResponse)
    MergeFrom(*source);
  }
}

void ExecuteScriptResponse::MergeFrom(const ExecuteScriptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void ExecuteScriptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecuteScriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteScriptResponse::CopyFrom(const ExecuteScriptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptResponse::IsInitialized() const {
  return true;
}

void ExecuteScriptResponse::InternalSwap(ExecuteScriptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteScriptAtLatestBlockRequest::_Internal {
 public:
};

ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtLatestBlockRequest)
}
ExecuteScriptAtLatestBlockRequest::ExecuteScriptAtLatestBlockRequest(const ExecuteScriptAtLatestBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtLatestBlockRequest)
}

void ExecuteScriptAtLatestBlockRequest::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtLatestBlockRequest::~ExecuteScriptAtLatestBlockRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtLatestBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteScriptAtLatestBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtLatestBlockRequest::ArenaDtor(void* object) {
  ExecuteScriptAtLatestBlockRequest* _this = reinterpret_cast< ExecuteScriptAtLatestBlockRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtLatestBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtLatestBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtLatestBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtLatestBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtLatestBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtLatestBlockRequest)
  return target;
}

size_t ExecuteScriptAtLatestBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteScriptAtLatestBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteScriptAtLatestBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteScriptAtLatestBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecuteScriptAtLatestBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecuteScriptAtLatestBlockRequest)
    MergeFrom(*source);
  }
}

void ExecuteScriptAtLatestBlockRequest::MergeFrom(const ExecuteScriptAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void ExecuteScriptAtLatestBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteScriptAtLatestBlockRequest::CopyFrom(const ExecuteScriptAtLatestBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtLatestBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtLatestBlockRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtLatestBlockRequest::InternalSwap(ExecuteScriptAtLatestBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtLatestBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteScriptAtBlockIdRequest::_Internal {
 public:
};

ExecuteScriptAtBlockIdRequest::ExecuteScriptAtBlockIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtBlockIdRequest)
}
ExecuteScriptAtBlockIdRequest::ExecuteScriptAtBlockIdRequest(const ExecuteScriptAtBlockIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtBlockIdRequest)
}

void ExecuteScriptAtBlockIdRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteScriptAtBlockIdRequest::~ExecuteScriptAtBlockIdRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtBlockIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteScriptAtBlockIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockIdRequest::ArenaDtor(void* object) {
  ExecuteScriptAtBlockIdRequest* _this = reinterpret_cast< ExecuteScriptAtBlockIdRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtBlockIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtBlockIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtBlockIdRequest)
  return target;
}

size_t ExecuteScriptAtBlockIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtBlockIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteScriptAtBlockIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecuteScriptAtBlockIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteScriptAtBlockIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteScriptAtBlockIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecuteScriptAtBlockIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecuteScriptAtBlockIdRequest)
    MergeFrom(*source);
  }
}

void ExecuteScriptAtBlockIdRequest::MergeFrom(const ExecuteScriptAtBlockIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtBlockIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void ExecuteScriptAtBlockIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecuteScriptAtBlockIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteScriptAtBlockIdRequest::CopyFrom(const ExecuteScriptAtBlockIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtBlockIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockIdRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockIdRequest::InternalSwap(ExecuteScriptAtBlockIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteScriptAtBlockHeightRequest::_Internal {
 public:
};

ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecuteScriptAtBlockHeightRequest)
}
ExecuteScriptAtBlockHeightRequest::ExecuteScriptAtBlockHeightRequest(const ExecuteScriptAtBlockHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecuteScriptAtBlockHeightRequest)
}

void ExecuteScriptAtBlockHeightRequest::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_height_ = PROTOBUF_ULONGLONG(0);
}

ExecuteScriptAtBlockHeightRequest::~ExecuteScriptAtBlockHeightRequest() {
  // @@protoc_insertion_point(destructor:flow.access.ExecuteScriptAtBlockHeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteScriptAtBlockHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteScriptAtBlockHeightRequest::ArenaDtor(void* object) {
  ExecuteScriptAtBlockHeightRequest* _this = reinterpret_cast< ExecuteScriptAtBlockHeightRequest* >(object);
  (void)_this;
}
void ExecuteScriptAtBlockHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteScriptAtBlockHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteScriptAtBlockHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmpty();
  block_height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteScriptAtBlockHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 block_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteScriptAtBlockHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_height = 1;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_height(), target);
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecuteScriptAtBlockHeightRequest)
  return target;
}

size_t ExecuteScriptAtBlockHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 2;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // uint64 block_height = 1;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteScriptAtBlockHeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteScriptAtBlockHeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteScriptAtBlockHeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecuteScriptAtBlockHeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecuteScriptAtBlockHeightRequest)
    MergeFrom(*source);
  }
}

void ExecuteScriptAtBlockHeightRequest::MergeFrom(const ExecuteScriptAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void ExecuteScriptAtBlockHeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteScriptAtBlockHeightRequest::CopyFrom(const ExecuteScriptAtBlockHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecuteScriptAtBlockHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteScriptAtBlockHeightRequest::IsInitialized() const {
  return true;
}

void ExecuteScriptAtBlockHeightRequest::InternalSwap(ExecuteScriptAtBlockHeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_height_, other->block_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteScriptAtBlockHeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventsResponse_Result::_Internal {
 public:
  static const ::flow::access::Timestamp& block_timestamp(const EventsResponse_Result* msg);
};

const ::flow::access::Timestamp&
EventsResponse_Result::_Internal::block_timestamp(const EventsResponse_Result* msg) {
  return *msg->block_timestamp_;
}
EventsResponse_Result::EventsResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.EventsResponse.Result)
}
EventsResponse_Result::EventsResponse_Result(const EventsResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  if (from._internal_has_block_timestamp()) {
    block_timestamp_ = new ::flow::access::Timestamp(*from.block_timestamp_);
  } else {
    block_timestamp_ = nullptr;
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.EventsResponse.Result)
}

void EventsResponse_Result::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&block_timestamp_)) + sizeof(block_height_));
}

EventsResponse_Result::~EventsResponse_Result() {
  // @@protoc_insertion_point(destructor:flow.access.EventsResponse.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventsResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_timestamp_;
}

void EventsResponse_Result::ArenaDtor(void* object) {
  EventsResponse_Result* _this = reinterpret_cast< EventsResponse_Result* >(object);
  (void)_this;
}
void EventsResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.EventsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  block_id_.ClearToEmpty();
  if (GetArena() == nullptr && block_timestamp_ != nullptr) {
    delete block_timestamp_;
  }
  block_timestamp_ = nullptr;
  block_height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .flow.access.Timestamp block_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.EventsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 block_height = 2;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // repeated .flow.access.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  // .flow.access.Timestamp block_timestamp = 4;
  if (this->has_block_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::block_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.EventsResponse.Result)
  return target;
}

size_t EventsResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.EventsResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.Event events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // .flow.access.Timestamp block_timestamp = 4;
  if (this->has_block_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_timestamp_);
  }

  // uint64 block_height = 2;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventsResponse_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.EventsResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const EventsResponse_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventsResponse_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.EventsResponse.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.EventsResponse.Result)
    MergeFrom(*source);
  }
}

void EventsResponse_Result::MergeFrom(const EventsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.EventsResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from.has_block_timestamp()) {
    _internal_mutable_block_timestamp()->::flow::access::Timestamp::MergeFrom(from._internal_block_timestamp());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void EventsResponse_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.EventsResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsResponse_Result::CopyFrom(const EventsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.EventsResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse_Result::IsInitialized() const {
  return true;
}

void EventsResponse_Result::InternalSwap(EventsResponse_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventsResponse_Result, block_height_)
      + sizeof(EventsResponse_Result::block_height_)
      - PROTOBUF_FIELD_OFFSET(EventsResponse_Result, block_timestamp_)>(
          reinterpret_cast<char*>(&block_timestamp_),
          reinterpret_cast<char*>(&other->block_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventsResponse::_Internal {
 public:
};

EventsResponse::EventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.EventsResponse)
}
EventsResponse::EventsResponse(const EventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.EventsResponse)
}

void EventsResponse::SharedCtor() {
}

EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:flow.access.EventsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventsResponse::ArenaDtor(void* object) {
  EventsResponse* _this = reinterpret_cast< EventsResponse* >(object);
  (void)_this;
}
void EventsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .flow.access.EventsResponse.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flow.access.EventsResponse.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.EventsResponse)
  return target;
}

size_t EventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.EventsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.EventsResponse.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.EventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EventsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.EventsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.EventsResponse)
    MergeFrom(*source);
  }
}

void EventsResponse::MergeFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.EventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void EventsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse::IsInitialized() const {
  return true;
}

void EventsResponse::InternalSwap(EventsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetEventsForHeightRangeRequest::_Internal {
 public:
};

GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetEventsForHeightRangeRequest)
}
GetEventsForHeightRangeRequest::GetEventsForHeightRangeRequest(const GetEventsForHeightRangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  ::memcpy(&start_height_, &from.start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:flow.access.GetEventsForHeightRangeRequest)
}

void GetEventsForHeightRangeRequest::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
}

GetEventsForHeightRangeRequest::~GetEventsForHeightRangeRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetEventsForHeightRangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEventsForHeightRangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForHeightRangeRequest::ArenaDtor(void* object) {
  GetEventsForHeightRangeRequest* _this = reinterpret_cast< GetEventsForHeightRangeRequest* >(object);
  (void)_this;
}
void GetEventsForHeightRangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForHeightRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForHeightRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetEventsForHeightRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForHeightRangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetEventsForHeightRangeRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForHeightRangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetEventsForHeightRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetEventsForHeightRangeRequest.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_height(), target);
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetEventsForHeightRangeRequest)
  return target;
}

size_t GetEventsForHeightRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetEventsForHeightRangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_height());
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEventsForHeightRangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetEventsForHeightRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEventsForHeightRangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEventsForHeightRangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetEventsForHeightRangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetEventsForHeightRangeRequest)
    MergeFrom(*source);
  }
}

void GetEventsForHeightRangeRequest::MergeFrom(const GetEventsForHeightRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetEventsForHeightRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
}

void GetEventsForHeightRangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetEventsForHeightRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEventsForHeightRangeRequest::CopyFrom(const GetEventsForHeightRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetEventsForHeightRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForHeightRangeRequest::IsInitialized() const {
  return true;
}

void GetEventsForHeightRangeRequest::InternalSwap(GetEventsForHeightRangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEventsForHeightRangeRequest, end_height_)
      + sizeof(GetEventsForHeightRangeRequest::end_height_)
      - PROTOBUF_FIELD_OFFSET(GetEventsForHeightRangeRequest, start_height_)>(
          reinterpret_cast<char*>(&start_height_),
          reinterpret_cast<char*>(&other->start_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForHeightRangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetEventsForBlockIdsRequest::_Internal {
 public:
};

GetEventsForBlockIdsRequest::GetEventsForBlockIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetEventsForBlockIdsRequest)
}
GetEventsForBlockIdsRequest::GetEventsForBlockIdsRequest(const GetEventsForBlockIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetEventsForBlockIdsRequest)
}

void GetEventsForBlockIdsRequest::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEventsForBlockIdsRequest::~GetEventsForBlockIdsRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetEventsForBlockIdsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEventsForBlockIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEventsForBlockIdsRequest::ArenaDtor(void* object) {
  GetEventsForBlockIdsRequest* _this = reinterpret_cast< GetEventsForBlockIdsRequest* >(object);
  (void)_this;
}
void GetEventsForBlockIdsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEventsForBlockIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEventsForBlockIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetEventsForBlockIdsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsForBlockIdsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetEventsForBlockIdsRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes block_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventsForBlockIdsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetEventsForBlockIdsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetEventsForBlockIdsRequest.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated bytes block_ids = 2;
  for (int i = 0, n = this->_internal_block_ids_size(); i < n; i++) {
    const auto& s = this->_internal_block_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetEventsForBlockIdsRequest)
  return target;
}

size_t GetEventsForBlockIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetEventsForBlockIdsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_ids_.size());
  for (int i = 0, n = block_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      block_ids_.Get(i));
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEventsForBlockIdsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetEventsForBlockIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEventsForBlockIdsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEventsForBlockIdsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetEventsForBlockIdsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetEventsForBlockIdsRequest)
    MergeFrom(*source);
  }
}

void GetEventsForBlockIdsRequest::MergeFrom(const GetEventsForBlockIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetEventsForBlockIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetEventsForBlockIdsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetEventsForBlockIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEventsForBlockIdsRequest::CopyFrom(const GetEventsForBlockIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetEventsForBlockIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsForBlockIdsRequest::IsInitialized() const {
  return true;
}

void GetEventsForBlockIdsRequest::InternalSwap(GetEventsForBlockIdsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_ids_.InternalSwap(&other->block_ids_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsForBlockIdsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersResponse::_Internal {
 public:
};

GetNetworkParametersResponse::GetNetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetNetworkParametersResponse)
}
GetNetworkParametersResponse::GetNetworkParametersResponse(const GetNetworkParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetNetworkParametersResponse)
}

void GetNetworkParametersResponse::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNetworkParametersResponse::~GetNetworkParametersResponse() {
  // @@protoc_insertion_point(destructor:flow.access.GetNetworkParametersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNetworkParametersResponse::ArenaDtor(void* object) {
  GetNetworkParametersResponse* _this = reinterpret_cast< GetNetworkParametersResponse* >(object);
  (void)_this;
}
void GetNetworkParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetworkParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.GetNetworkParametersResponse.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetNetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.GetNetworkParametersResponse.chain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetNetworkParametersResponse)
  return target;
}

size_t GetNetworkParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetNetworkParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetNetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetNetworkParametersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetNetworkParametersResponse)
    MergeFrom(*source);
  }
}

void GetNetworkParametersResponse::MergeFrom(const GetNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetNetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
}

void GetNetworkParametersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetNetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersResponse::CopyFrom(const GetNetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetNetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersResponse::IsInitialized() const {
  return true;
}

void GetNetworkParametersResponse::InternalSwap(GetNetworkParametersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersRequest::_Internal {
 public:
};

GetNetworkParametersRequest::GetNetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetNetworkParametersRequest)
}
GetNetworkParametersRequest::GetNetworkParametersRequest(const GetNetworkParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.GetNetworkParametersRequest)
}

void GetNetworkParametersRequest::SharedCtor() {
}

GetNetworkParametersRequest::~GetNetworkParametersRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetNetworkParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNetworkParametersRequest::ArenaDtor(void* object) {
  GetNetworkParametersRequest* _this = reinterpret_cast< GetNetworkParametersRequest* >(object);
  (void)_this;
}
void GetNetworkParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetworkParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetNetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetNetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetNetworkParametersRequest)
  return target;
}

size_t GetNetworkParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetNetworkParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetNetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetNetworkParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetNetworkParametersRequest)
    MergeFrom(*source);
  }
}

void GetNetworkParametersRequest::MergeFrom(const GetNetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetNetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNetworkParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetNetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersRequest::CopyFrom(const GetNetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetNetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersRequest::IsInitialized() const {
  return true;
}

void GetNetworkParametersRequest::InternalSwap(GetNetworkParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolStateSnapshotResponse::_Internal {
 public:
};

ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ProtocolStateSnapshotResponse)
}
ProtocolStateSnapshotResponse::ProtocolStateSnapshotResponse(const ProtocolStateSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serializedsnapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serializedsnapshot().empty()) {
    serializedsnapshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serializedsnapshot(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ProtocolStateSnapshotResponse)
}

void ProtocolStateSnapshotResponse::SharedCtor() {
serializedsnapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProtocolStateSnapshotResponse::~ProtocolStateSnapshotResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ProtocolStateSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolStateSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serializedsnapshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtocolStateSnapshotResponse::ArenaDtor(void* object) {
  ProtocolStateSnapshotResponse* _this = reinterpret_cast< ProtocolStateSnapshotResponse* >(object);
  (void)_this;
}
void ProtocolStateSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolStateSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolStateSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ProtocolStateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serializedsnapshot_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolStateSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes serializedSnapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serializedsnapshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolStateSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ProtocolStateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes serializedSnapshot = 1;
  if (this->serializedsnapshot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serializedsnapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ProtocolStateSnapshotResponse)
  return target;
}

size_t ProtocolStateSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ProtocolStateSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serializedSnapshot = 1;
  if (this->serializedsnapshot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serializedsnapshot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolStateSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ProtocolStateSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolStateSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolStateSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ProtocolStateSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ProtocolStateSnapshotResponse)
    MergeFrom(*source);
  }
}

void ProtocolStateSnapshotResponse::MergeFrom(const ProtocolStateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ProtocolStateSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serializedsnapshot().size() > 0) {
    _internal_set_serializedsnapshot(from._internal_serializedsnapshot());
  }
}

void ProtocolStateSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ProtocolStateSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolStateSnapshotResponse::CopyFrom(const ProtocolStateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ProtocolStateSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolStateSnapshotResponse::IsInitialized() const {
  return true;
}

void ProtocolStateSnapshotResponse::InternalSwap(ProtocolStateSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serializedsnapshot_.Swap(&other->serializedsnapshot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolStateSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLatestProtocolStateSnapshotRequest::_Internal {
 public:
};

GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetLatestProtocolStateSnapshotRequest)
}
GetLatestProtocolStateSnapshotRequest::GetLatestProtocolStateSnapshotRequest(const GetLatestProtocolStateSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow.access.GetLatestProtocolStateSnapshotRequest)
}

void GetLatestProtocolStateSnapshotRequest::SharedCtor() {
}

GetLatestProtocolStateSnapshotRequest::~GetLatestProtocolStateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetLatestProtocolStateSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLatestProtocolStateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLatestProtocolStateSnapshotRequest::ArenaDtor(void* object) {
  GetLatestProtocolStateSnapshotRequest* _this = reinterpret_cast< GetLatestProtocolStateSnapshotRequest* >(object);
  (void)_this;
}
void GetLatestProtocolStateSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLatestProtocolStateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLatestProtocolStateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLatestProtocolStateSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLatestProtocolStateSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetLatestProtocolStateSnapshotRequest)
  return target;
}

size_t GetLatestProtocolStateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLatestProtocolStateSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLatestProtocolStateSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLatestProtocolStateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetLatestProtocolStateSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetLatestProtocolStateSnapshotRequest)
    MergeFrom(*source);
  }
}

void GetLatestProtocolStateSnapshotRequest::MergeFrom(const GetLatestProtocolStateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLatestProtocolStateSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestProtocolStateSnapshotRequest::CopyFrom(const GetLatestProtocolStateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetLatestProtocolStateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestProtocolStateSnapshotRequest::IsInitialized() const {
  return true;
}

void GetLatestProtocolStateSnapshotRequest::InternalSwap(GetLatestProtocolStateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLatestProtocolStateSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecutionResultForBlockIdResponse::_Internal {
 public:
  static const ::flow::access::ExecutionResult& execution_result(const ExecutionResultForBlockIdResponse* msg);
};

const ::flow::access::ExecutionResult&
ExecutionResultForBlockIdResponse::_Internal::execution_result(const ExecutionResultForBlockIdResponse* msg) {
  return *msg->execution_result_;
}
ExecutionResultForBlockIdResponse::ExecutionResultForBlockIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecutionResultForBlockIdResponse)
}
ExecutionResultForBlockIdResponse::ExecutionResultForBlockIdResponse(const ExecutionResultForBlockIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_execution_result()) {
    execution_result_ = new ::flow::access::ExecutionResult(*from.execution_result_);
  } else {
    execution_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecutionResultForBlockIdResponse)
}

void ExecutionResultForBlockIdResponse::SharedCtor() {
execution_result_ = nullptr;
}

ExecutionResultForBlockIdResponse::~ExecutionResultForBlockIdResponse() {
  // @@protoc_insertion_point(destructor:flow.access.ExecutionResultForBlockIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutionResultForBlockIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete execution_result_;
}

void ExecutionResultForBlockIdResponse::ArenaDtor(void* object) {
  ExecutionResultForBlockIdResponse* _this = reinterpret_cast< ExecutionResultForBlockIdResponse* >(object);
  (void)_this;
}
void ExecutionResultForBlockIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionResultForBlockIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionResultForBlockIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecutionResultForBlockIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && execution_result_ != nullptr) {
    delete execution_result_;
  }
  execution_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionResultForBlockIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flow.access.ExecutionResult execution_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionResultForBlockIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecutionResultForBlockIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow.access.ExecutionResult execution_result = 1;
  if (this->has_execution_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::execution_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecutionResultForBlockIdResponse)
  return target;
}

size_t ExecutionResultForBlockIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecutionResultForBlockIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow.access.ExecutionResult execution_result = 1;
  if (this->has_execution_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *execution_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionResultForBlockIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecutionResultForBlockIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionResultForBlockIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionResultForBlockIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecutionResultForBlockIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecutionResultForBlockIdResponse)
    MergeFrom(*source);
  }
}

void ExecutionResultForBlockIdResponse::MergeFrom(const ExecutionResultForBlockIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecutionResultForBlockIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_execution_result()) {
    _internal_mutable_execution_result()->::flow::access::ExecutionResult::MergeFrom(from._internal_execution_result());
  }
}

void ExecutionResultForBlockIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecutionResultForBlockIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionResultForBlockIdResponse::CopyFrom(const ExecutionResultForBlockIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecutionResultForBlockIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResultForBlockIdResponse::IsInitialized() const {
  return true;
}

void ExecutionResultForBlockIdResponse::InternalSwap(ExecutionResultForBlockIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(execution_result_, other->execution_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionResultForBlockIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetExecutionResultForBlockIdRequest::_Internal {
 public:
};

GetExecutionResultForBlockIdRequest::GetExecutionResultForBlockIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.GetExecutionResultForBlockIdRequest)
}
GetExecutionResultForBlockIdRequest::GetExecutionResultForBlockIdRequest(const GetExecutionResultForBlockIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.GetExecutionResultForBlockIdRequest)
}

void GetExecutionResultForBlockIdRequest::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetExecutionResultForBlockIdRequest::~GetExecutionResultForBlockIdRequest() {
  // @@protoc_insertion_point(destructor:flow.access.GetExecutionResultForBlockIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetExecutionResultForBlockIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetExecutionResultForBlockIdRequest::ArenaDtor(void* object) {
  GetExecutionResultForBlockIdRequest* _this = reinterpret_cast< GetExecutionResultForBlockIdRequest* >(object);
  (void)_this;
}
void GetExecutionResultForBlockIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExecutionResultForBlockIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExecutionResultForBlockIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.GetExecutionResultForBlockIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExecutionResultForBlockIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExecutionResultForBlockIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.GetExecutionResultForBlockIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.GetExecutionResultForBlockIdRequest)
  return target;
}

size_t GetExecutionResultForBlockIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.GetExecutionResultForBlockIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetExecutionResultForBlockIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.GetExecutionResultForBlockIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetExecutionResultForBlockIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetExecutionResultForBlockIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.GetExecutionResultForBlockIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.GetExecutionResultForBlockIdRequest)
    MergeFrom(*source);
  }
}

void GetExecutionResultForBlockIdRequest::MergeFrom(const GetExecutionResultForBlockIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.GetExecutionResultForBlockIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void GetExecutionResultForBlockIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.GetExecutionResultForBlockIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetExecutionResultForBlockIdRequest::CopyFrom(const GetExecutionResultForBlockIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.GetExecutionResultForBlockIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExecutionResultForBlockIdRequest::IsInitialized() const {
  return true;
}

void GetExecutionResultForBlockIdRequest::InternalSwap(GetExecutionResultForBlockIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExecutionResultForBlockIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Block::_Internal {
 public:
  static const ::flow::access::Timestamp& timestamp(const Block* msg);
};

const ::flow::access::Timestamp&
Block::_Internal::timestamp(const Block* msg) {
  return *msg->timestamp_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  collection_guarantees_(arena),
  block_seals_(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collection_guarantees_(from.collection_guarantees_),
      block_seals_(from.block_seals_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_id(), 
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::flow::access::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.Block)
}

void Block::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(height_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:flow.access.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_guarantees_.Clear();
  block_seals_.Clear();
  signatures_.Clear();
  id_.ClearToEmpty();
  parent_id_.ClearToEmpty();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flow.access.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.CollectionGuarantee collection_guarantees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collection_guarantees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.BlockSeal block_seals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_seals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes signatures = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes parent_id = 2;
  if (this->parent_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_parent_id(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // .flow.access.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  // repeated .flow.access.CollectionGuarantee collection_guarantees = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collection_guarantees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_collection_guarantees(i), target, stream);
  }

  // repeated .flow.access.BlockSeal block_seals = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_seals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_block_seals(i), target, stream);
  }

  // repeated bytes signatures = 7;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.CollectionGuarantee collection_guarantees = 5;
  total_size += 1UL * this->_internal_collection_guarantees_size();
  for (const auto& msg : this->collection_guarantees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flow.access.BlockSeal block_seals = 6;
  total_size += 1UL * this->_internal_block_seals_size();
  for (const auto& msg : this->block_seals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes signatures = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes parent_id = 2;
  if (this->parent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_id());
  }

  // .flow.access.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_guarantees_.MergeFrom(from.collection_guarantees_);
  block_seals_.MergeFrom(from.block_seals_);
  signatures_.MergeFrom(from.signatures_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.parent_id().size() > 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->::flow::access::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_guarantees_.InternalSwap(&other->collection_guarantees_);
  block_seals_.InternalSwap(&other->block_seals_);
  signatures_.InternalSwap(&other->signatures_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_id_.Swap(&other->parent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, height_)
      + sizeof(Block::height_)
      - PROTOBUF_FIELD_OFFSET(Block, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockHeader::_Internal {
 public:
};

BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_id(), 
      GetArena());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockHeader)
}

void BlockHeader::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = PROTOBUF_ULONGLONG(0);
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:flow.access.BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  parent_id_.ClearToEmpty();
  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes parent_id = 2;
  if (this->parent_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_parent_id(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes parent_id = 2;
  if (this->parent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_id());
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.parent_id().size() > 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_id_.Swap(&other->parent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockSeal::_Internal {
 public:
};

BlockSeal::BlockSeal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  execution_receipt_signatures_(arena),
  result_approval_signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.BlockSeal)
}
BlockSeal::BlockSeal(const BlockSeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      execution_receipt_signatures_(from.execution_receipt_signatures_),
      result_approval_signatures_(from.result_approval_signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  execution_receipt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_execution_receipt_id().empty()) {
    execution_receipt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_execution_receipt_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.BlockSeal)
}

void BlockSeal::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
execution_receipt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockSeal::~BlockSeal() {
  // @@protoc_insertion_point(destructor:flow.access.BlockSeal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockSeal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execution_receipt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockSeal::ArenaDtor(void* object) {
  BlockSeal* _this = reinterpret_cast< BlockSeal* >(object);
  (void)_this;
}
void BlockSeal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockSeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockSeal::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.BlockSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execution_receipt_signatures_.Clear();
  result_approval_signatures_.Clear();
  block_id_.ClearToEmpty();
  execution_receipt_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockSeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes execution_receipt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_execution_receipt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes execution_receipt_signatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_receipt_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes result_approval_signatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_result_approval_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockSeal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.BlockSeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // bytes execution_receipt_id = 2;
  if (this->execution_receipt_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_execution_receipt_id(), target);
  }

  // repeated bytes execution_receipt_signatures = 3;
  for (int i = 0, n = this->_internal_execution_receipt_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_execution_receipt_signatures(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes result_approval_signatures = 4;
  for (int i = 0, n = this->_internal_result_approval_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_result_approval_signatures(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.BlockSeal)
  return target;
}

size_t BlockSeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.BlockSeal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes execution_receipt_signatures = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(execution_receipt_signatures_.size());
  for (int i = 0, n = execution_receipt_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      execution_receipt_signatures_.Get(i));
  }

  // repeated bytes result_approval_signatures = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(result_approval_signatures_.size());
  for (int i = 0, n = result_approval_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      result_approval_signatures_.Get(i));
  }

  // bytes block_id = 1;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes execution_receipt_id = 2;
  if (this->execution_receipt_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_execution_receipt_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockSeal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.BlockSeal)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockSeal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockSeal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.BlockSeal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.BlockSeal)
    MergeFrom(*source);
  }
}

void BlockSeal::MergeFrom(const BlockSeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.BlockSeal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  execution_receipt_signatures_.MergeFrom(from.execution_receipt_signatures_);
  result_approval_signatures_.MergeFrom(from.result_approval_signatures_);
  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from.execution_receipt_id().size() > 0) {
    _internal_set_execution_receipt_id(from._internal_execution_receipt_id());
  }
}

void BlockSeal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.BlockSeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockSeal::CopyFrom(const BlockSeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.BlockSeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSeal::IsInitialized() const {
  return true;
}

void BlockSeal::InternalSwap(BlockSeal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  execution_receipt_signatures_.InternalSwap(&other->execution_receipt_signatures_);
  result_approval_signatures_.InternalSwap(&other->result_approval_signatures_);
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  execution_receipt_id_.Swap(&other->execution_receipt_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockSeal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Collection::_Internal {
 public:
};

Collection::Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transaction_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Collection)
}
Collection::Collection(const Collection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_ids_(from.transaction_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.Collection)
}

void Collection::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Collection::~Collection() {
  // @@protoc_insertion_point(destructor:flow.access.Collection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Collection::ArenaDtor(void* object) {
  Collection* _this = reinterpret_cast< Collection* >(object);
  (void)_this;
}
void Collection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_ids_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transaction_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transaction_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated bytes transaction_ids = 2;
  for (int i = 0, n = this->_internal_transaction_ids_size(); i < n; i++) {
    const auto& s = this->_internal_transaction_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Collection)
  return target;
}

size_t Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Collection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transaction_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transaction_ids_.size());
  for (int i = 0, n = transaction_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transaction_ids_.Get(i));
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  const Collection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Collection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Collection)
    MergeFrom(*source);
  }
}

void Collection::MergeFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_ids_.MergeFrom(from.transaction_ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void Collection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collection::CopyFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  return true;
}

void Collection::InternalSwap(Collection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_ids_.InternalSwap(&other->transaction_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Collection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CollectionGuarantee::_Internal {
 public:
};

CollectionGuarantee::CollectionGuarantee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.CollectionGuarantee)
}
CollectionGuarantee::CollectionGuarantee(const CollectionGuarantee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection_id().empty()) {
    collection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.CollectionGuarantee)
}

void CollectionGuarantee::SharedCtor() {
collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CollectionGuarantee::~CollectionGuarantee() {
  // @@protoc_insertion_point(destructor:flow.access.CollectionGuarantee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectionGuarantee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CollectionGuarantee::ArenaDtor(void* object) {
  CollectionGuarantee* _this = reinterpret_cast< CollectionGuarantee* >(object);
  (void)_this;
}
void CollectionGuarantee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionGuarantee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectionGuarantee::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.CollectionGuarantee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  collection_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGuarantee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes collection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionGuarantee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.CollectionGuarantee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes collection_id = 1;
  if (this->collection_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_collection_id(), target);
  }

  // repeated bytes signatures = 2;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.CollectionGuarantee)
  return target;
}

size_t CollectionGuarantee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.CollectionGuarantee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signatures = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // bytes collection_id = 1;
  if (this->collection_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_collection_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionGuarantee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.CollectionGuarantee)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionGuarantee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionGuarantee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.CollectionGuarantee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.CollectionGuarantee)
    MergeFrom(*source);
  }
}

void CollectionGuarantee::MergeFrom(const CollectionGuarantee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.CollectionGuarantee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from.collection_id().size() > 0) {
    _internal_set_collection_id(from._internal_collection_id());
  }
}

void CollectionGuarantee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.CollectionGuarantee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionGuarantee::CopyFrom(const CollectionGuarantee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.CollectionGuarantee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGuarantee::IsInitialized() const {
  return true;
}

void CollectionGuarantee::InternalSwap(CollectionGuarantee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  collection_id_.Swap(&other->collection_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGuarantee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::flow::access::TransactionProposalKey& proposal_key(const Transaction* msg);
};

const ::flow::access::TransactionProposalKey&
Transaction::_Internal::proposal_key(const Transaction* msg) {
  return *msg->proposal_key_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena),
  authorizers_(arena),
  payload_signatures_(arena),
  envelope_signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_),
      authorizers_(from.authorizers_),
      payload_signatures_(from.payload_signatures_),
      envelope_signatures_(from.envelope_signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  reference_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_block_id().empty()) {
    reference_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_block_id(), 
      GetArena());
  }
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArena());
  }
  if (from._internal_has_proposal_key()) {
    proposal_key_ = new ::flow::access::TransactionProposalKey(*from.proposal_key_);
  } else {
    proposal_key_ = nullptr;
  }
  gas_limit_ = from.gas_limit_;
  // @@protoc_insertion_point(copy_constructor:flow.access.Transaction)
}

void Transaction::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reference_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gas_limit_) -
    reinterpret_cast<char*>(&proposal_key_)) + sizeof(gas_limit_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:flow.access.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proposal_key_;
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  authorizers_.Clear();
  payload_signatures_.Clear();
  envelope_signatures_.Clear();
  script_.ClearToEmpty();
  reference_block_id_.ClearToEmpty();
  payer_.ClearToEmpty();
  if (GetArena() == nullptr && proposal_key_ != nullptr) {
    delete proposal_key_;
  }
  proposal_key_ = nullptr;
  gas_limit_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes reference_block_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flow.access.TransactionProposalKey proposal_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes authorizers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_authorizers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.TransactionSignature payload_signatures = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payload_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.TransactionSignature envelope_signatures = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_envelope_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // repeated bytes arguments = 2;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes reference_block_id = 3;
  if (this->reference_block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reference_block_id(), target);
  }

  // uint64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_limit(), target);
  }

  // .flow.access.TransactionProposalKey proposal_key = 5;
  if (this->has_proposal_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::proposal_key(this), target, stream);
  }

  // bytes payer = 6;
  if (this->payer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payer(), target);
  }

  // repeated bytes authorizers = 7;
  for (int i = 0, n = this->_internal_authorizers_size(); i < n; i++) {
    const auto& s = this->_internal_authorizers(i);
    target = stream->WriteBytes(7, s, target);
  }

  // repeated .flow.access.TransactionSignature payload_signatures = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payload_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_payload_signatures(i), target, stream);
  }

  // repeated .flow.access.TransactionSignature envelope_signatures = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_envelope_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_envelope_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes arguments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      arguments_.Get(i));
  }

  // repeated bytes authorizers = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(authorizers_.size());
  for (int i = 0, n = authorizers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      authorizers_.Get(i));
  }

  // repeated .flow.access.TransactionSignature payload_signatures = 8;
  total_size += 1UL * this->_internal_payload_signatures_size();
  for (const auto& msg : this->payload_signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flow.access.TransactionSignature envelope_signatures = 9;
  total_size += 1UL * this->_internal_envelope_signatures_size();
  for (const auto& msg : this->envelope_signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes script = 1;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // bytes reference_block_id = 3;
  if (this->reference_block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reference_block_id());
  }

  // bytes payer = 6;
  if (this->payer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer());
  }

  // .flow.access.TransactionProposalKey proposal_key = 5;
  if (this->has_proposal_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_key_);
  }

  // uint64 gas_limit = 4;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  authorizers_.MergeFrom(from.authorizers_);
  payload_signatures_.MergeFrom(from.payload_signatures_);
  envelope_signatures_.MergeFrom(from.envelope_signatures_);
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
  if (from.reference_block_id().size() > 0) {
    _internal_set_reference_block_id(from._internal_reference_block_id());
  }
  if (from.payer().size() > 0) {
    _internal_set_payer(from._internal_payer());
  }
  if (from.has_proposal_key()) {
    _internal_mutable_proposal_key()->::flow::access::TransactionProposalKey::MergeFrom(from._internal_proposal_key());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  authorizers_.InternalSwap(&other->authorizers_);
  payload_signatures_.InternalSwap(&other->payload_signatures_);
  envelope_signatures_.InternalSwap(&other->envelope_signatures_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_block_id_.Swap(&other->reference_block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payer_.Swap(&other->payer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, gas_limit_)
      + sizeof(Transaction::gas_limit_)
      - PROTOBUF_FIELD_OFFSET(Transaction, proposal_key_)>(
          reinterpret_cast<char*>(&proposal_key_),
          reinterpret_cast<char*>(&other->proposal_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionProposalKey::_Internal {
 public:
};

TransactionProposalKey::TransactionProposalKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionProposalKey)
}
TransactionProposalKey::TransactionProposalKey(const TransactionProposalKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(key_id_));
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionProposalKey)
}

void TransactionProposalKey::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(key_id_));
}

TransactionProposalKey::~TransactionProposalKey() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionProposalKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionProposalKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionProposalKey::ArenaDtor(void* object) {
  TransactionProposalKey* _this = reinterpret_cast< TransactionProposalKey* >(object);
  (void)_this;
}
void TransactionProposalKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionProposalKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionProposalKey::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionProposalKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_id_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(key_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionProposalKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionProposalKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionProposalKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 key_id = 2;
  if (this->key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_key_id(), target);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionProposalKey)
  return target;
}

size_t TransactionProposalKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionProposalKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint32 key_id = 2;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionProposalKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.TransactionProposalKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionProposalKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionProposalKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.TransactionProposalKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.TransactionProposalKey)
    MergeFrom(*source);
  }
}

void TransactionProposalKey::MergeFrom(const TransactionProposalKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionProposalKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.key_id() != 0) {
    _internal_set_key_id(from._internal_key_id());
  }
}

void TransactionProposalKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.TransactionProposalKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionProposalKey::CopyFrom(const TransactionProposalKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionProposalKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionProposalKey::IsInitialized() const {
  return true;
}

void TransactionProposalKey::InternalSwap(TransactionProposalKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionProposalKey, key_id_)
      + sizeof(TransactionProposalKey::key_id_)
      - PROTOBUF_FIELD_OFFSET(TransactionProposalKey, sequence_number_)>(
          reinterpret_cast<char*>(&sequence_number_),
          reinterpret_cast<char*>(&other->sequence_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionProposalKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionSignature::_Internal {
 public:
};

TransactionSignature::TransactionSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.TransactionSignature)
}
TransactionSignature::TransactionSignature(const TransactionSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  key_id_ = from.key_id_;
  // @@protoc_insertion_point(copy_constructor:flow.access.TransactionSignature)
}

void TransactionSignature::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_id_ = 0u;
}

TransactionSignature::~TransactionSignature() {
  // @@protoc_insertion_point(destructor:flow.access.TransactionSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionSignature::ArenaDtor(void* object) {
  TransactionSignature* _this = reinterpret_cast< TransactionSignature* >(object);
  (void)_this;
}
void TransactionSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.TransactionSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  signature_.ClearToEmpty();
  key_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.TransactionSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 key_id = 2;
  if (this->key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_key_id(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.TransactionSignature)
  return target;
}

size_t TransactionSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.TransactionSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // uint32 key_id = 2;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.TransactionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.TransactionSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.TransactionSignature)
    MergeFrom(*source);
  }
}

void TransactionSignature::MergeFrom(const TransactionSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.TransactionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.key_id() != 0) {
    _internal_set_key_id(from._internal_key_id());
  }
}

void TransactionSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.TransactionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionSignature::CopyFrom(const TransactionSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.TransactionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionSignature::IsInitialized() const {
  return true;
}

void TransactionSignature::InternalSwap(TransactionSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_id_, other->key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Account_ContractsEntry_DoNotUse::Account_ContractsEntry_DoNotUse() {}
Account_ContractsEntry_DoNotUse::Account_ContractsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_ContractsEntry_DoNotUse::MergeFrom(const Account_ContractsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_ContractsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_ContractsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contracts_.MergeFrom(from.contracts_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:flow.access.Account)
}

void Account::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
balance_ = PROTOBUF_ULONGLONG(0);
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:flow.access.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  contracts_.Clear();
  address_.ClearToEmpty();
  code_.ClearToEmpty();
  balance_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.AccountKey keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> contracts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&contracts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 balance = 2;
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // repeated .flow.access.AccountKey keys = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_keys(i), target, stream);
  }

  // map<string, bytes> contracts = 5;
  if (!this->_internal_contracts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flow.access.Account.ContractsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_contracts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_contracts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts().begin();
          it != this->_internal_contracts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_ContractsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts().begin();
          it != this->_internal_contracts().end(); ++it) {
        target = Account_ContractsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.AccountKey keys = 4;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, bytes> contracts = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts().begin();
      it != this->_internal_contracts().end(); ++it) {
    total_size += Account_ContractsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // uint64 balance = 2;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  contracts_.MergeFrom(from.contracts_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  contracts_.Swap(&other->contracts_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountKey::_Internal {
 public:
};

AccountKey::AccountKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.AccountKey)
}
AccountKey::AccountKey(const AccountKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revoked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(revoked_));
  // @@protoc_insertion_point(copy_constructor:flow.access.AccountKey)
}

void AccountKey::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revoked_) -
    reinterpret_cast<char*>(&id_)) + sizeof(revoked_));
}

AccountKey::~AccountKey() {
  // @@protoc_insertion_point(destructor:flow.access.AccountKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountKey::ArenaDtor(void* object) {
  AccountKey* _this = reinterpret_cast< AccountKey* >(object);
  (void)_this;
}
void AccountKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountKey::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.AccountKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revoked_) -
      reinterpret_cast<char*>(&id_)) + sizeof(revoked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sign_algo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sign_algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash_algo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hash_algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revoked = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          revoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.AccountKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // uint32 sign_algo = 3;
  if (this->sign_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sign_algo(), target);
  }

  // uint32 hash_algo = 4;
  if (this->hash_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hash_algo(), target);
  }

  // uint32 weight = 5;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_weight(), target);
  }

  // uint32 sequence_number = 6;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sequence_number(), target);
  }

  // bool revoked = 7;
  if (this->revoked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_revoked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.AccountKey)
  return target;
}

size_t AccountKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.AccountKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 sign_algo = 3;
  if (this->sign_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sign_algo());
  }

  // uint32 hash_algo = 4;
  if (this->hash_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash_algo());
  }

  // uint32 weight = 5;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());
  }

  // uint32 sequence_number = 6;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // bool revoked = 7;
  if (this->revoked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.AccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.AccountKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.AccountKey)
    MergeFrom(*source);
  }
}

void AccountKey::MergeFrom(const AccountKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.AccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sign_algo() != 0) {
    _internal_set_sign_algo(from._internal_sign_algo());
  }
  if (from.hash_algo() != 0) {
    _internal_set_hash_algo(from._internal_hash_algo());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.revoked() != 0) {
    _internal_set_revoked(from._internal_revoked());
  }
}

void AccountKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.AccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountKey::CopyFrom(const AccountKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.AccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountKey::IsInitialized() const {
  return true;
}

void AccountKey::InternalSwap(AccountKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountKey, revoked_)
      + sizeof(AccountKey::revoked_)
      - PROTOBUF_FIELD_OFFSET(AccountKey, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  ::memcpy(&transaction_index_, &from.transaction_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_index_) -
    reinterpret_cast<char*>(&transaction_index_)) + sizeof(event_index_));
  // @@protoc_insertion_point(copy_constructor:flow.access.Event)
}

void Event::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_index_) -
    reinterpret_cast<char*>(&transaction_index_)) + sizeof(event_index_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:flow.access.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  payload_.ClearToEmpty();
  ::memset(&transaction_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_index_) -
      reinterpret_cast<char*>(&transaction_index_)) + sizeof(event_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.Event.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 transaction_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transaction_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.Event.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // uint32 transaction_index = 3;
  if (this->transaction_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_transaction_index(), target);
  }

  // uint32 event_index = 4;
  if (this->event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_index(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_id());
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 transaction_index = 3;
  if (this->transaction_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transaction_index());
  }

  // uint32 event_index = 4;
  if (this->event_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.transaction_index() != 0) {
    _internal_set_transaction_index(from._internal_transaction_index());
  }
  if (from.event_index() != 0) {
    _internal_set_event_index(from._internal_event_index());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, event_index_)
      + sizeof(Event::event_index_)
      - PROTOBUF_FIELD_OFFSET(Event, transaction_index_)>(
          reinterpret_cast<char*>(&transaction_index_),
          reinterpret_cast<char*>(&other->transaction_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecutionResult::_Internal {
 public:
};

ExecutionResult::ExecutionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunks_(arena),
  service_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ExecutionResult)
}
ExecutionResult::ExecutionResult(const ExecutionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_),
      service_events_(from.service_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_result_id().empty()) {
    previous_result_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_result_id(), 
      GetArena());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ExecutionResult)
}

void ExecutionResult::SharedCtor() {
previous_result_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecutionResult::~ExecutionResult() {
  // @@protoc_insertion_point(destructor:flow.access.ExecutionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previous_result_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionResult::ArenaDtor(void* object) {
  ExecutionResult* _this = reinterpret_cast< ExecutionResult* >(object);
  (void)_this;
}
void ExecutionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ExecutionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  service_events_.Clear();
  previous_result_id_.ClearToEmpty();
  block_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes previous_result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_previous_result_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.Chunk chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .flow.access.ServiceEvent service_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ExecutionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_result_id = 1;
  if (this->previous_result_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_previous_result_id(), target);
  }

  // bytes block_id = 2;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_id(), target);
  }

  // repeated .flow.access.Chunk chunks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunks(i), target, stream);
  }

  // repeated .flow.access.ServiceEvent service_events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_service_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ExecutionResult)
  return target;
}

size_t ExecutionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ExecutionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flow.access.Chunk chunks = 3;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flow.access.ServiceEvent service_events = 4;
  total_size += 1UL * this->_internal_service_events_size();
  for (const auto& msg : this->service_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes previous_result_id = 1;
  if (this->previous_result_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_result_id());
  }

  // bytes block_id = 2;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ExecutionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ExecutionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ExecutionResult)
    MergeFrom(*source);
  }
}

void ExecutionResult::MergeFrom(const ExecutionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ExecutionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  service_events_.MergeFrom(from.service_events_);
  if (from.previous_result_id().size() > 0) {
    _internal_set_previous_result_id(from._internal_previous_result_id());
  }
  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
}

void ExecutionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ExecutionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionResult::CopyFrom(const ExecutionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ExecutionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResult::IsInitialized() const {
  return true;
}

void ExecutionResult::InternalSwap(ExecutionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  service_events_.InternalSwap(&other->service_events_);
  previous_result_id_.Swap(&other->previous_result_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_state().empty()) {
    start_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_state(), 
      GetArena());
  }
  event_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_collection().empty()) {
    event_collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_collection(), 
      GetArena());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArena());
  }
  end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_state().empty()) {
    end_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_state(), 
      GetArena());
  }
  ::memcpy(&total_computation_used_, &from.total_computation_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&total_computation_used_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:flow.access.Chunk)
}

void Chunk::SharedCtor() {
start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_computation_used_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&total_computation_used_)) + sizeof(index_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:flow.access.Chunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_state_.ClearToEmpty();
  event_collection_.ClearToEmpty();
  block_id_.ClearToEmpty();
  end_state_.ClearToEmpty();
  ::memset(&total_computation_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&total_computation_used_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes start_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes event_collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_computation_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_computation_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 number_of_transactions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          number_of_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_end_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_state = 1;
  if (this->start_state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start_state(), target);
  }

  // bytes event_collection = 2;
  if (this->event_collection().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_event_collection(), target);
  }

  // bytes block_id = 3;
  if (this->block_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_id(), target);
  }

  // uint64 total_computation_used = 4;
  if (this->total_computation_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_computation_used(), target);
  }

  // uint64 number_of_transactions = 5;
  if (this->number_of_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_number_of_transactions(), target);
  }

  // uint64 index = 6;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_index(), target);
  }

  // bytes end_state = 7;
  if (this->end_state().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_end_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Chunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_state = 1;
  if (this->start_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_state());
  }

  // bytes event_collection = 2;
  if (this->event_collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_event_collection());
  }

  // bytes block_id = 3;
  if (this->block_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // bytes end_state = 7;
  if (this->end_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_state());
  }

  // uint64 total_computation_used = 4;
  if (this->total_computation_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_computation_used());
  }

  // uint64 number_of_transactions = 5;
  if (this->number_of_transactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_number_of_transactions());
  }

  // uint64 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Chunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Chunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_state().size() > 0) {
    _internal_set_start_state(from._internal_start_state());
  }
  if (from.event_collection().size() > 0) {
    _internal_set_event_collection(from._internal_event_collection());
  }
  if (from.block_id().size() > 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from.end_state().size() > 0) {
    _internal_set_end_state(from._internal_end_state());
  }
  if (from.total_computation_used() != 0) {
    _internal_set_total_computation_used(from._internal_total_computation_used());
  }
  if (from.number_of_transactions() != 0) {
    _internal_set_number_of_transactions(from._internal_number_of_transactions());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Chunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_state_.Swap(&other->start_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  event_collection_.Swap(&other->event_collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_id_.Swap(&other->block_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_state_.Swap(&other->end_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, index_)
      + sizeof(Chunk::index_)
      - PROTOBUF_FIELD_OFFSET(Chunk, total_computation_used_)>(
          reinterpret_cast<char*>(&total_computation_used_),
          reinterpret_cast<char*>(&other->total_computation_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServiceEvent::_Internal {
 public:
};

ServiceEvent::ServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.ServiceEvent)
}
ServiceEvent::ServiceEvent(const ServiceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flow.access.ServiceEvent)
}

void ServiceEvent::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceEvent::~ServiceEvent() {
  // @@protoc_insertion_point(destructor:flow.access.ServiceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceEvent::ArenaDtor(void* object) {
  ServiceEvent* _this = reinterpret_cast< ServiceEvent* >(object);
  (void)_this;
}
void ServiceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.ServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow.access.ServiceEvent.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.ServiceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow.access.ServiceEvent.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.ServiceEvent)
  return target;
}

size_t ServiceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.ServiceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.ServiceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.ServiceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.ServiceEvent)
    MergeFrom(*source);
  }
}

void ServiceEvent::MergeFrom(const ServiceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.ServiceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void ServiceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.ServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceEvent::CopyFrom(const ServiceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.ServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceEvent::IsInitialized() const {
  return true;
}

void ServiceEvent::InternalSwap(ServiceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flow.access.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:flow.access.Timestamp)
}

void Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:flow.access.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:flow.access.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow.access.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow.access.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow.access.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seconds());
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nanos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flow.access.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flow.access.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flow.access.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow.access.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanos() != 0) {
    _internal_set_nanos(from._internal_nanos());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flow.access.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow.access.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, nanos_)
      + sizeof(Timestamp::nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace access
}  // namespace flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow::access::PingRequest* Arena::CreateMaybeMessage< ::flow::access::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::PingResponse* Arena::CreateMaybeMessage< ::flow::access::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockHeaderResponse* Arena::CreateMaybeMessage< ::flow::access::BlockHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestBlockHeaderRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestBlockHeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestBlockHeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockHeaderByIdRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockHeaderByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockHeaderByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockHeaderByHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockHeaderByHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockHeaderByHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockResponse* Arena::CreateMaybeMessage< ::flow::access::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockByIdRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetBlockByHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetBlockByHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetBlockByHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::CollectionResponse* Arena::CreateMaybeMessage< ::flow::access::CollectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::CollectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetCollectionByIdRequest* Arena::CreateMaybeMessage< ::flow::access::GetCollectionByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetCollectionByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::SendTransactionResponse* Arena::CreateMaybeMessage< ::flow::access::SendTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::SendTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::SendTransactionRequest* Arena::CreateMaybeMessage< ::flow::access::SendTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::SendTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetTransactionRequest* Arena::CreateMaybeMessage< ::flow::access::GetTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionResponse* Arena::CreateMaybeMessage< ::flow::access::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionResultResponse* Arena::CreateMaybeMessage< ::flow::access::TransactionResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::AccountResponse* Arena::CreateMaybeMessage< ::flow::access::AccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::AccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountAtLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::GetAccountAtLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountAtLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetAccountAtBlockHeightRequest* Arena::CreateMaybeMessage< ::flow::access::GetAccountAtBlockHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetAccountAtBlockHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptResponse* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtLatestBlockRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtLatestBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtLatestBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtBlockIdRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtBlockIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtBlockIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecuteScriptAtBlockHeightRequest* Arena::CreateMaybeMessage< ::flow::access::ExecuteScriptAtBlockHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecuteScriptAtBlockHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::EventsResponse_Result* Arena::CreateMaybeMessage< ::flow::access::EventsResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::EventsResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::EventsResponse* Arena::CreateMaybeMessage< ::flow::access::EventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::EventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetEventsForHeightRangeRequest* Arena::CreateMaybeMessage< ::flow::access::GetEventsForHeightRangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetEventsForHeightRangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetEventsForBlockIdsRequest* Arena::CreateMaybeMessage< ::flow::access::GetEventsForBlockIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetEventsForBlockIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetNetworkParametersResponse* Arena::CreateMaybeMessage< ::flow::access::GetNetworkParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetNetworkParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetNetworkParametersRequest* Arena::CreateMaybeMessage< ::flow::access::GetNetworkParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetNetworkParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ProtocolStateSnapshotResponse* Arena::CreateMaybeMessage< ::flow::access::ProtocolStateSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ProtocolStateSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetLatestProtocolStateSnapshotRequest* Arena::CreateMaybeMessage< ::flow::access::GetLatestProtocolStateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetLatestProtocolStateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecutionResultForBlockIdResponse* Arena::CreateMaybeMessage< ::flow::access::ExecutionResultForBlockIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecutionResultForBlockIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::GetExecutionResultForBlockIdRequest* Arena::CreateMaybeMessage< ::flow::access::GetExecutionResultForBlockIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::GetExecutionResultForBlockIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Block* Arena::CreateMaybeMessage< ::flow::access::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockHeader* Arena::CreateMaybeMessage< ::flow::access::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::BlockSeal* Arena::CreateMaybeMessage< ::flow::access::BlockSeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::BlockSeal >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Collection* Arena::CreateMaybeMessage< ::flow::access::Collection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Collection >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::CollectionGuarantee* Arena::CreateMaybeMessage< ::flow::access::CollectionGuarantee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::CollectionGuarantee >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Transaction* Arena::CreateMaybeMessage< ::flow::access::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionProposalKey* Arena::CreateMaybeMessage< ::flow::access::TransactionProposalKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionProposalKey >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::TransactionSignature* Arena::CreateMaybeMessage< ::flow::access::TransactionSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::TransactionSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Account_ContractsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flow::access::Account_ContractsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Account_ContractsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Account* Arena::CreateMaybeMessage< ::flow::access::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::AccountKey* Arena::CreateMaybeMessage< ::flow::access::AccountKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::AccountKey >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Event* Arena::CreateMaybeMessage< ::flow::access::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ExecutionResult* Arena::CreateMaybeMessage< ::flow::access::ExecutionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ExecutionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Chunk* Arena::CreateMaybeMessage< ::flow::access::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::ServiceEvent* Arena::CreateMaybeMessage< ::flow::access::ServiceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::ServiceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flow::access::Timestamp* Arena::CreateMaybeMessage< ::flow::access::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow::access::Timestamp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
